
AVR_Nour_COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00002a10  00002aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800096  00800096  00002ada  2**0
                  ALLOC
  3 .stab         000027b4  00000000  00000000  00002adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001207  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006497  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006747  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008390  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000927b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a028  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a188  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a415  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abe3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 14 	call	0x2802	; 0x2802 <main>
      8a:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 df 14 	jmp	0x29be	; 0x29be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MGIR_voidEnable>:
 *      Author: ENG.AbdelrhmanEslam
 */
#include "GIE_Init.h"

void MGIR_voidEnable()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIE_SREG_REG,7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <MGIR_voidDisEnable>:

void MGIR_voidDisEnable()
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GIE_SREG_REG,7);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MEXTI_voidSenseControl>:



//static void (*callback)(void);

void MEXTI_voidSenseControl(u8 A_u8EXTI_Line, u8 A_u8EXTI_Sense){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	2a 97       	sbiw	r28, 0x0a	; 10
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8EXTI_Line)
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	3a 87       	std	Y+10, r19	; 0x0a
     b9e:	29 87       	std	Y+9, r18	; 0x09
     ba0:	89 85       	ldd	r24, Y+9	; 0x09
     ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <MEXTI_voidSenseControl+0x2e>
     baa:	66 c0       	rjmp	.+204    	; 0xc78 <MEXTI_voidSenseControl+0xfa>
     bac:	29 85       	ldd	r18, Y+9	; 0x09
     bae:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb0:	22 30       	cpi	r18, 0x02	; 2
     bb2:	31 05       	cpc	r19, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <MEXTI_voidSenseControl+0x3a>
     bb6:	bb c0       	rjmp	.+374    	; 0xd2e <MEXTI_voidSenseControl+0x1b0>
     bb8:	89 85       	ldd	r24, Y+9	; 0x09
     bba:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <MEXTI_voidSenseControl+0x44>
     bc0:	d5 c0       	rjmp	.+426    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
	{
	// REXTI_MCUCR_REG = REXTI_MCUCR_REG & ~(0b1111<<0) | A_u8EXTI_Sense<<0
	case EXTI_Line0:
		switch(A_u8EXTI_Sense)
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	38 87       	std	Y+8, r19	; 0x08
     bca:	2f 83       	std	Y+7, r18	; 0x07
     bcc:	8f 81       	ldd	r24, Y+7	; 0x07
     bce:	98 85       	ldd	r25, Y+8	; 0x08
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	91 05       	cpc	r25, r1
     bd4:	21 f1       	breq	.+72     	; 0xc1e <MEXTI_voidSenseControl+0xa0>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	22 30       	cpi	r18, 0x02	; 2
     bdc:	31 05       	cpc	r19, r1
     bde:	2c f4       	brge	.+10     	; 0xbea <MEXTI_voidSenseControl+0x6c>
     be0:	8f 81       	ldd	r24, Y+7	; 0x07
     be2:	98 85       	ldd	r25, Y+8	; 0x08
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	61 f0       	breq	.+24     	; 0xc00 <MEXTI_voidSenseControl+0x82>
     be8:	c1 c0       	rjmp	.+386    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
     bea:	2f 81       	ldd	r18, Y+7	; 0x07
     bec:	38 85       	ldd	r19, Y+8	; 0x08
     bee:	22 30       	cpi	r18, 0x02	; 2
     bf0:	31 05       	cpc	r19, r1
     bf2:	21 f1       	breq	.+72     	; 0xc3c <MEXTI_voidSenseControl+0xbe>
     bf4:	8f 81       	ldd	r24, Y+7	; 0x07
     bf6:	98 85       	ldd	r25, Y+8	; 0x08
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	71 f1       	breq	.+92     	; 0xc5a <MEXTI_voidSenseControl+0xdc>
     bfe:	b6 c0       	rjmp	.+364    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
		{
		case EXTI_LOWLEVEL:
			CLR_BIT(REXTI_MCUCR_REG,0);
     c00:	a5 e5       	ldi	r26, 0x55	; 85
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e5 e5       	ldi	r30, 0x55	; 85
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	8c 93       	st	X, r24
			CLR_BIT(REXTI_MCUCR_REG,1);
     c0e:	a5 e5       	ldi	r26, 0x55	; 85
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e5 e5       	ldi	r30, 0x55	; 85
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8d 7f       	andi	r24, 0xFD	; 253
     c1a:	8c 93       	st	X, r24
     c1c:	a7 c0       	rjmp	.+334    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
			break;
		case EXTI_ONChange:
					SET_BIT(REXTI_MCUCR_REG,0);
     c1e:	a5 e5       	ldi	r26, 0x55	; 85
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e5 e5       	ldi	r30, 0x55	; 85
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	81 60       	ori	r24, 0x01	; 1
     c2a:	8c 93       	st	X, r24
					CLR_BIT(REXTI_MCUCR_REG,1);
     c2c:	a5 e5       	ldi	r26, 0x55	; 85
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e5 e5       	ldi	r30, 0x55	; 85
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8d 7f       	andi	r24, 0xFD	; 253
     c38:	8c 93       	st	X, r24
     c3a:	98 c0       	rjmp	.+304    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
					break;
		case EXTI_Falling:
					CLR_BIT(REXTI_MCUCR_REG,0);
     c3c:	a5 e5       	ldi	r26, 0x55	; 85
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e5 e5       	ldi	r30, 0x55	; 85
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8e 7f       	andi	r24, 0xFE	; 254
     c48:	8c 93       	st	X, r24
					SET_BIT(REXTI_MCUCR_REG,1);
     c4a:	a5 e5       	ldi	r26, 0x55	; 85
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e5 e5       	ldi	r30, 0x55	; 85
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	8c 93       	st	X, r24
     c58:	89 c0       	rjmp	.+274    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
					break;
		case EXTI_Rising:
					SET_BIT(REXTI_MCUCR_REG,0);
     c5a:	a5 e5       	ldi	r26, 0x55	; 85
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e5 e5       	ldi	r30, 0x55	; 85
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	8c 93       	st	X, r24
					SET_BIT(REXTI_MCUCR_REG,1);
     c68:	a5 e5       	ldi	r26, 0x55	; 85
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e5 e5       	ldi	r30, 0x55	; 85
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	82 60       	ori	r24, 0x02	; 2
     c74:	8c 93       	st	X, r24
     c76:	7a c0       	rjmp	.+244    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
			break;
		}
		break;

	case EXTI_Line1:
			switch(A_u8EXTI_Sense)
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	3e 83       	std	Y+6, r19	; 0x06
     c80:	2d 83       	std	Y+5, r18	; 0x05
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	9e 81       	ldd	r25, Y+6	; 0x06
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	91 05       	cpc	r25, r1
     c8a:	21 f1       	breq	.+72     	; 0xcd4 <MEXTI_voidSenseControl+0x156>
     c8c:	2d 81       	ldd	r18, Y+5	; 0x05
     c8e:	3e 81       	ldd	r19, Y+6	; 0x06
     c90:	22 30       	cpi	r18, 0x02	; 2
     c92:	31 05       	cpc	r19, r1
     c94:	2c f4       	brge	.+10     	; 0xca0 <MEXTI_voidSenseControl+0x122>
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
     c98:	9e 81       	ldd	r25, Y+6	; 0x06
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	61 f0       	breq	.+24     	; 0xcb6 <MEXTI_voidSenseControl+0x138>
     c9e:	66 c0       	rjmp	.+204    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
     ca0:	2d 81       	ldd	r18, Y+5	; 0x05
     ca2:	3e 81       	ldd	r19, Y+6	; 0x06
     ca4:	22 30       	cpi	r18, 0x02	; 2
     ca6:	31 05       	cpc	r19, r1
     ca8:	21 f1       	breq	.+72     	; 0xcf2 <MEXTI_voidSenseControl+0x174>
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	91 05       	cpc	r25, r1
     cb2:	71 f1       	breq	.+92     	; 0xd10 <MEXTI_voidSenseControl+0x192>
     cb4:	5b c0       	rjmp	.+182    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
			{
			case EXTI_LOWLEVEL:
				CLR_BIT(REXTI_MCUCR_REG,2);
     cb6:	a5 e5       	ldi	r26, 0x55	; 85
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e5 e5       	ldi	r30, 0x55	; 85
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8b 7f       	andi	r24, 0xFB	; 251
     cc2:	8c 93       	st	X, r24
				CLR_BIT(REXTI_MCUCR_REG,3);
     cc4:	a5 e5       	ldi	r26, 0x55	; 85
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e5 e5       	ldi	r30, 0x55	; 85
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	87 7f       	andi	r24, 0xF7	; 247
     cd0:	8c 93       	st	X, r24
     cd2:	4c c0       	rjmp	.+152    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
				break;
			case EXTI_ONChange:
				SET_BIT(REXTI_MCUCR_REG,2);
     cd4:	a5 e5       	ldi	r26, 0x55	; 85
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e5 e5       	ldi	r30, 0x55	; 85
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	84 60       	ori	r24, 0x04	; 4
     ce0:	8c 93       	st	X, r24
				CLR_BIT(REXTI_MCUCR_REG,3);
     ce2:	a5 e5       	ldi	r26, 0x55	; 85
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e5       	ldi	r30, 0x55	; 85
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	87 7f       	andi	r24, 0xF7	; 247
     cee:	8c 93       	st	X, r24
     cf0:	3d c0       	rjmp	.+122    	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
				break;
			case EXTI_Falling:
						CLR_BIT(REXTI_MCUCR_REG,2);
     cf2:	a5 e5       	ldi	r26, 0x55	; 85
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e5 e5       	ldi	r30, 0x55	; 85
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8b 7f       	andi	r24, 0xFB	; 251
     cfe:	8c 93       	st	X, r24
						SET_BIT(REXTI_MCUCR_REG,3);
     d00:	a5 e5       	ldi	r26, 0x55	; 85
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e5 e5       	ldi	r30, 0x55	; 85
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	88 60       	ori	r24, 0x08	; 8
     d0c:	8c 93       	st	X, r24
     d0e:	2e c0       	rjmp	.+92     	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
						break;
			case EXTI_Rising:
						SET_BIT(REXTI_MCUCR_REG,2);
     d10:	a5 e5       	ldi	r26, 0x55	; 85
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e5 e5       	ldi	r30, 0x55	; 85
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	84 60       	ori	r24, 0x04	; 4
     d1c:	8c 93       	st	X, r24
						SET_BIT(REXTI_MCUCR_REG,3);
     d1e:	a5 e5       	ldi	r26, 0x55	; 85
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e5       	ldi	r30, 0x55	; 85
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	8c 93       	st	X, r24
     d2c:	1f c0       	rjmp	.+62     	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
				break;
			}
			break;
	case EXTI_Line2:
				switch(A_u8EXTI_Sense)
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	3c 83       	std	Y+4, r19	; 0x04
     d36:	2b 83       	std	Y+3, r18	; 0x03
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	91 05       	cpc	r25, r1
     d40:	31 f0       	breq	.+12     	; 0xd4e <MEXTI_voidSenseControl+0x1d0>
     d42:	2b 81       	ldd	r18, Y+3	; 0x03
     d44:	3c 81       	ldd	r19, Y+4	; 0x04
     d46:	23 30       	cpi	r18, 0x03	; 3
     d48:	31 05       	cpc	r19, r1
     d4a:	49 f0       	breq	.+18     	; 0xd5e <MEXTI_voidSenseControl+0x1e0>
     d4c:	0f c0       	rjmp	.+30     	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
				{
				case EXTI_Falling:
							CLR_BIT(REXTI_MCUCSR_REG,6);
     d4e:	a4 e5       	ldi	r26, 0x54	; 84
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e4 e5       	ldi	r30, 0x54	; 84
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8f 7b       	andi	r24, 0xBF	; 191
     d5a:	8c 93       	st	X, r24
     d5c:	07 c0       	rjmp	.+14     	; 0xd6c <MEXTI_voidSenseControl+0x1ee>
							break;
				case EXTI_Rising:
							SET_BIT(REXTI_MCUCSR_REG,6);
     d5e:	a4 e5       	ldi	r26, 0x54	; 84
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e4 e5       	ldi	r30, 0x54	; 84
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 64       	ori	r24, 0x40	; 64
     d6a:	8c 93       	st	X, r24
					break;
				}
				break;

	}
}
     d6c:	2a 96       	adiw	r28, 0x0a	; 10
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <MEXTI_voidEnable>:

void MEXTI_voidEnable(u8 A_u8EXTI_Line)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <MEXTI_voidEnable+0x6>
     d84:	0f 92       	push	r0
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTI_Line)
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3b 83       	std	Y+3, r19	; 0x03
     d94:	2a 83       	std	Y+2, r18	; 0x02
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	91 05       	cpc	r25, r1
     d9e:	89 f0       	breq	.+34     	; 0xdc2 <MEXTI_voidEnable+0x44>
     da0:	2a 81       	ldd	r18, Y+2	; 0x02
     da2:	3b 81       	ldd	r19, Y+3	; 0x03
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	a1 f0       	breq	.+40     	; 0xdd2 <MEXTI_voidEnable+0x54>
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	b9 f4       	brne	.+46     	; 0xde0 <MEXTI_voidEnable+0x62>
	{
	case EXTI_Line0: SET_BIT(REXTI_GICR_REG,6); break;
     db2:	ab e5       	ldi	r26, 0x5B	; 91
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e5       	ldi	r30, 0x5B	; 91
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 64       	ori	r24, 0x40	; 64
     dbe:	8c 93       	st	X, r24
     dc0:	0f c0       	rjmp	.+30     	; 0xde0 <MEXTI_voidEnable+0x62>
	case EXTI_Line1: SET_BIT(REXTI_GICR_REG,7); break;
     dc2:	ab e5       	ldi	r26, 0x5B	; 91
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	eb e5       	ldi	r30, 0x5B	; 91
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 68       	ori	r24, 0x80	; 128
     dce:	8c 93       	st	X, r24
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <MEXTI_voidEnable+0x62>
	case EXTI_Line2: SET_BIT(REXTI_GICR_REG,5); break;
     dd2:	ab e5       	ldi	r26, 0x5B	; 91
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e5       	ldi	r30, 0x5B	; 91
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 62       	ori	r24, 0x20	; 32
     dde:	8c 93       	st	X, r24
	}


}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MEXTI_voidDisEnable>:


void MEXTI_voidDisEnable(u8 A_u8EXTI_Line){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <MEXTI_voidDisEnable+0x6>
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	89 83       	std	Y+1, r24	; 0x01

	switch(A_u8EXTI_Line)
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	3b 83       	std	Y+3, r19	; 0x03
     e02:	2a 83       	std	Y+2, r18	; 0x02
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	91 05       	cpc	r25, r1
     e0c:	89 f0       	breq	.+34     	; 0xe30 <MEXTI_voidDisEnable+0x44>
     e0e:	2a 81       	ldd	r18, Y+2	; 0x02
     e10:	3b 81       	ldd	r19, Y+3	; 0x03
     e12:	22 30       	cpi	r18, 0x02	; 2
     e14:	31 05       	cpc	r19, r1
     e16:	a1 f0       	breq	.+40     	; 0xe40 <MEXTI_voidDisEnable+0x54>
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	9b 81       	ldd	r25, Y+3	; 0x03
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	b9 f4       	brne	.+46     	; 0xe4e <MEXTI_voidDisEnable+0x62>
		{
		case EXTI_Line0: CLR_BIT(REXTI_GICR_REG,6); break;
     e20:	ab e5       	ldi	r26, 0x5B	; 91
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	eb e5       	ldi	r30, 0x5B	; 91
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8f 7b       	andi	r24, 0xBF	; 191
     e2c:	8c 93       	st	X, r24
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <MEXTI_voidDisEnable+0x62>
		case EXTI_Line1: CLR_BIT(REXTI_GICR_REG,7); break;
     e30:	ab e5       	ldi	r26, 0x5B	; 91
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	eb e5       	ldi	r30, 0x5B	; 91
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8f 77       	andi	r24, 0x7F	; 127
     e3c:	8c 93       	st	X, r24
     e3e:	07 c0       	rjmp	.+14     	; 0xe4e <MEXTI_voidDisEnable+0x62>
		case EXTI_Line2: CLR_BIT(REXTI_GICR_REG,5); break;
     e40:	ab e5       	ldi	r26, 0x5B	; 91
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	eb e5       	ldi	r30, 0x5B	; 91
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8f 7d       	andi	r24, 0xDF	; 223
     e4c:	8c 93       	st	X, r24
		}

		}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <MDIO_voidSetPinDirection>:

#include "DIO_Init.h"

//(PortA, PIN 0, 1)
void MDIO_voidSetPinDirection(u8 A_u8PortNo,u8 A_u8PinNo,u8 A_u8PinDirection)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	2d 97       	sbiw	r28, 0x0d	; 13
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	6a 83       	std	Y+2, r22	; 0x02
     e72:	4b 83       	std	Y+3, r20	; 0x03
	if((A_u8PortNo <= PORTD) && (A_u8PinNo <= PIN7) && (A_u8PinDirection <= OUTPUT))
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	84 30       	cpi	r24, 0x04	; 4
     e78:	08 f0       	brcs	.+2      	; 0xe7c <MDIO_voidSetPinDirection+0x22>
     e7a:	08 c1       	rjmp	.+528    	; 0x108c <MDIO_voidSetPinDirection+0x232>
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	88 30       	cpi	r24, 0x08	; 8
     e80:	08 f0       	brcs	.+2      	; 0xe84 <MDIO_voidSetPinDirection+0x2a>
     e82:	04 c1       	rjmp	.+520    	; 0x108c <MDIO_voidSetPinDirection+0x232>
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f0       	brcs	.+2      	; 0xe8c <MDIO_voidSetPinDirection+0x32>
     e8a:	00 c1       	rjmp	.+512    	; 0x108c <MDIO_voidSetPinDirection+0x232>
	{


	switch(A_u8PortNo)
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3d 87       	std	Y+13, r19	; 0x0d
     e94:	2c 87       	std	Y+12, r18	; 0x0c
     e96:	8c 85       	ldd	r24, Y+12	; 0x0c
     e98:	9d 85       	ldd	r25, Y+13	; 0x0d
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <MDIO_voidSetPinDirection+0x48>
     ea0:	4f c0       	rjmp	.+158    	; 0xf40 <MDIO_voidSetPinDirection+0xe6>
     ea2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ea4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	2c f4       	brge	.+10     	; 0xeb6 <MDIO_voidSetPinDirection+0x5c>
     eac:	8c 85       	ldd	r24, Y+12	; 0x0c
     eae:	9d 85       	ldd	r25, Y+13	; 0x0d
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	71 f0       	breq	.+28     	; 0xed0 <MDIO_voidSetPinDirection+0x76>
     eb4:	eb c0       	rjmp	.+470    	; 0x108c <MDIO_voidSetPinDirection+0x232>
     eb6:	2c 85       	ldd	r18, Y+12	; 0x0c
     eb8:	3d 85       	ldd	r19, Y+13	; 0x0d
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <MDIO_voidSetPinDirection+0x68>
     ec0:	77 c0       	rjmp	.+238    	; 0xfb0 <MDIO_voidSetPinDirection+0x156>
     ec2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	91 05       	cpc	r25, r1
     eca:	09 f4       	brne	.+2      	; 0xece <MDIO_voidSetPinDirection+0x74>
     ecc:	a9 c0       	rjmp	.+338    	; 0x1020 <MDIO_voidSetPinDirection+0x1c6>
     ece:	de c0       	rjmp	.+444    	; 0x108c <MDIO_voidSetPinDirection+0x232>
	{
	case PORTA:
			switch(A_u8PinDirection)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3b 87       	std	Y+11, r19	; 0x0b
     ed8:	2a 87       	std	Y+10, r18	; 0x0a
     eda:	8a 85       	ldd	r24, Y+10	; 0x0a
     edc:	9b 85       	ldd	r25, Y+11	; 0x0b
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	d1 f0       	breq	.+52     	; 0xf16 <MDIO_voidSetPinDirection+0xbc>
     ee2:	2a 85       	ldd	r18, Y+10	; 0x0a
     ee4:	3b 85       	ldd	r19, Y+11	; 0x0b
     ee6:	21 30       	cpi	r18, 0x01	; 1
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f0       	breq	.+2      	; 0xeee <MDIO_voidSetPinDirection+0x94>
     eec:	cf c0       	rjmp	.+414    	; 0x108c <MDIO_voidSetPinDirection+0x232>
			{
			case OUTPUT: SET_BIT(DIO_DDRA_REG, A_u8PinNo); break;
     eee:	aa e3       	ldi	r26, 0x3A	; 58
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <MDIO_voidSetPinDirection+0xb2>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <MDIO_voidSetPinDirection+0xae>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	bb c0       	rjmp	.+374    	; 0x108c <MDIO_voidSetPinDirection+0x232>
			case INPUT : CLR_BIT(DIO_DDRA_REG, A_u8PinNo); break;
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <MDIO_voidSetPinDirection+0xda>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <MDIO_voidSetPinDirection+0xd6>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	a6 c0       	rjmp	.+332    	; 0x108c <MDIO_voidSetPinDirection+0x232>
			}
			break;
	case PORTB:
			switch(A_u8PinDirection)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	39 87       	std	Y+9, r19	; 0x09
     f48:	28 87       	std	Y+8, r18	; 0x08
     f4a:	88 85       	ldd	r24, Y+8	; 0x08
     f4c:	99 85       	ldd	r25, Y+9	; 0x09
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	d1 f0       	breq	.+52     	; 0xf86 <MDIO_voidSetPinDirection+0x12c>
     f52:	28 85       	ldd	r18, Y+8	; 0x08
     f54:	39 85       	ldd	r19, Y+9	; 0x09
     f56:	21 30       	cpi	r18, 0x01	; 1
     f58:	31 05       	cpc	r19, r1
     f5a:	09 f0       	breq	.+2      	; 0xf5e <MDIO_voidSetPinDirection+0x104>
     f5c:	97 c0       	rjmp	.+302    	; 0x108c <MDIO_voidSetPinDirection+0x232>
			{
			case OUTPUT: SET_BIT(DIO_DDRB_REG, A_u8PinNo); break;
     f5e:	a7 e3       	ldi	r26, 0x37	; 55
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e7 e3       	ldi	r30, 0x37	; 55
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <MDIO_voidSetPinDirection+0x122>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <MDIO_voidSetPinDirection+0x11e>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	83 c0       	rjmp	.+262    	; 0x108c <MDIO_voidSetPinDirection+0x232>
			case INPUT : CLR_BIT(DIO_DDRB_REG, A_u8PinNo); break;
     f86:	a7 e3       	ldi	r26, 0x37	; 55
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e7 e3       	ldi	r30, 0x37	; 55
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <MDIO_voidSetPinDirection+0x14a>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <MDIO_voidSetPinDirection+0x146>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	6e c0       	rjmp	.+220    	; 0x108c <MDIO_voidSetPinDirection+0x232>
			}
			break;
	case PORTC:
			switch(A_u8PinDirection)
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	3f 83       	std	Y+7, r19	; 0x07
     fb8:	2e 83       	std	Y+6, r18	; 0x06
     fba:	8e 81       	ldd	r24, Y+6	; 0x06
     fbc:	9f 81       	ldd	r25, Y+7	; 0x07
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	d1 f0       	breq	.+52     	; 0xff6 <MDIO_voidSetPinDirection+0x19c>
     fc2:	2e 81       	ldd	r18, Y+6	; 0x06
     fc4:	3f 81       	ldd	r19, Y+7	; 0x07
     fc6:	21 30       	cpi	r18, 0x01	; 1
     fc8:	31 05       	cpc	r19, r1
     fca:	09 f0       	breq	.+2      	; 0xfce <MDIO_voidSetPinDirection+0x174>
     fcc:	5f c0       	rjmp	.+190    	; 0x108c <MDIO_voidSetPinDirection+0x232>
			{
			case OUTPUT: SET_BIT(DIO_DDRC_REG, A_u8PinNo); break;
     fce:	a4 e3       	ldi	r26, 0x34	; 52
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e4 e3       	ldi	r30, 0x34	; 52
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <MDIO_voidSetPinDirection+0x192>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <MDIO_voidSetPinDirection+0x18e>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	4b c0       	rjmp	.+150    	; 0x108c <MDIO_voidSetPinDirection+0x232>
			case INPUT : CLR_BIT(DIO_DDRC_REG, A_u8PinNo); break;
     ff6:	a4 e3       	ldi	r26, 0x34	; 52
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e4 e3       	ldi	r30, 0x34	; 52
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <MDIO_voidSetPinDirection+0x1ba>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <MDIO_voidSetPinDirection+0x1b6>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	36 c0       	rjmp	.+108    	; 0x108c <MDIO_voidSetPinDirection+0x232>
			}
			break;
	case PORTD:
			switch(A_u8PinDirection)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3d 83       	std	Y+5, r19	; 0x05
    1028:	2c 83       	std	Y+4, r18	; 0x04
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	c9 f0       	breq	.+50     	; 0x1064 <MDIO_voidSetPinDirection+0x20a>
    1032:	2c 81       	ldd	r18, Y+4	; 0x04
    1034:	3d 81       	ldd	r19, Y+5	; 0x05
    1036:	21 30       	cpi	r18, 0x01	; 1
    1038:	31 05       	cpc	r19, r1
    103a:	41 f5       	brne	.+80     	; 0x108c <MDIO_voidSetPinDirection+0x232>
			{
			case OUTPUT: SET_BIT(DIO_DDRD_REG, A_u8PinNo); break;
    103c:	a1 e3       	ldi	r26, 0x31	; 49
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e1 e3       	ldi	r30, 0x31	; 49
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <MDIO_voidSetPinDirection+0x200>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <MDIO_voidSetPinDirection+0x1fc>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	14 c0       	rjmp	.+40     	; 0x108c <MDIO_voidSetPinDirection+0x232>
			case INPUT : CLR_BIT(DIO_DDRD_REG, A_u8PinNo); break;
    1064:	a1 e3       	ldi	r26, 0x31	; 49
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e1 e3       	ldi	r30, 0x31	; 49
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <MDIO_voidSetPinDirection+0x228>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <MDIO_voidSetPinDirection+0x224>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
			}
			break;
	}

	}
}
    108c:	2d 96       	adiw	r28, 0x0d	; 13
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <MDIO_voidSetPinValue>:
void MDIO_voidSetPinValue	 (u8 A_u8PortNo,u8 A_u8PinNo,u8 A_u8PinValue)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	2d 97       	sbiw	r28, 0x0d	; 13
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	6a 83       	std	Y+2, r22	; 0x02
    10b6:	4b 83       	std	Y+3, r20	; 0x03
	if((A_u8PortNo <= PORTD) && (A_u8PinNo <= PIN7) && (A_u8PinValue <= HIGH))
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	84 30       	cpi	r24, 0x04	; 4
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <MDIO_voidSetPinValue+0x22>
    10be:	08 c1       	rjmp	.+528    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	88 30       	cpi	r24, 0x08	; 8
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <MDIO_voidSetPinValue+0x2a>
    10c6:	04 c1       	rjmp	.+520    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <MDIO_voidSetPinValue+0x32>
    10ce:	00 c1       	rjmp	.+512    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
		{
		switch(A_u8PortNo)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	3d 87       	std	Y+13, r19	; 0x0d
    10d8:	2c 87       	std	Y+12, r18	; 0x0c
    10da:	8c 85       	ldd	r24, Y+12	; 0x0c
    10dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	91 05       	cpc	r25, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <MDIO_voidSetPinValue+0x48>
    10e4:	4f c0       	rjmp	.+158    	; 0x1184 <MDIO_voidSetPinValue+0xe6>
    10e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	2c f4       	brge	.+10     	; 0x10fa <MDIO_voidSetPinValue+0x5c>
    10f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    10f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	71 f0       	breq	.+28     	; 0x1114 <MDIO_voidSetPinValue+0x76>
    10f8:	eb c0       	rjmp	.+470    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
    10fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    10fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	09 f4       	brne	.+2      	; 0x1106 <MDIO_voidSetPinValue+0x68>
    1104:	77 c0       	rjmp	.+238    	; 0x11f4 <MDIO_voidSetPinValue+0x156>
    1106:	8c 85       	ldd	r24, Y+12	; 0x0c
    1108:	9d 85       	ldd	r25, Y+13	; 0x0d
    110a:	83 30       	cpi	r24, 0x03	; 3
    110c:	91 05       	cpc	r25, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <MDIO_voidSetPinValue+0x74>
    1110:	a9 c0       	rjmp	.+338    	; 0x1264 <MDIO_voidSetPinValue+0x1c6>
    1112:	de c0       	rjmp	.+444    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
		{
		case PORTA:
				switch(A_u8PinValue)
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	3b 87       	std	Y+11, r19	; 0x0b
    111c:	2a 87       	std	Y+10, r18	; 0x0a
    111e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1120:	9b 85       	ldd	r25, Y+11	; 0x0b
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	d1 f0       	breq	.+52     	; 0x115a <MDIO_voidSetPinValue+0xbc>
    1126:	2a 85       	ldd	r18, Y+10	; 0x0a
    1128:	3b 85       	ldd	r19, Y+11	; 0x0b
    112a:	21 30       	cpi	r18, 0x01	; 1
    112c:	31 05       	cpc	r19, r1
    112e:	09 f0       	breq	.+2      	; 0x1132 <MDIO_voidSetPinValue+0x94>
    1130:	cf c0       	rjmp	.+414    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				{
				case HIGH: SET_BIT(DIO_PORTA_REG, A_u8PinNo); break;
    1132:	ab e3       	ldi	r26, 0x3B	; 59
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	eb e3       	ldi	r30, 0x3B	; 59
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <MDIO_voidSetPinValue+0xb2>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <MDIO_voidSetPinValue+0xae>
    1154:	84 2b       	or	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	bb c0       	rjmp	.+374    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				case LOW : CLR_BIT(DIO_PORTA_REG, A_u8PinNo); break;
    115a:	ab e3       	ldi	r26, 0x3B	; 59
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	eb e3       	ldi	r30, 0x3B	; 59
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <MDIO_voidSetPinValue+0xda>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <MDIO_voidSetPinValue+0xd6>
    117c:	80 95       	com	r24
    117e:	84 23       	and	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	a6 c0       	rjmp	.+332    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				}
				break;
		case PORTB:
				switch(A_u8PinValue)
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	39 87       	std	Y+9, r19	; 0x09
    118c:	28 87       	std	Y+8, r18	; 0x08
    118e:	88 85       	ldd	r24, Y+8	; 0x08
    1190:	99 85       	ldd	r25, Y+9	; 0x09
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	d1 f0       	breq	.+52     	; 0x11ca <MDIO_voidSetPinValue+0x12c>
    1196:	28 85       	ldd	r18, Y+8	; 0x08
    1198:	39 85       	ldd	r19, Y+9	; 0x09
    119a:	21 30       	cpi	r18, 0x01	; 1
    119c:	31 05       	cpc	r19, r1
    119e:	09 f0       	breq	.+2      	; 0x11a2 <MDIO_voidSetPinValue+0x104>
    11a0:	97 c0       	rjmp	.+302    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				{
				case HIGH: SET_BIT(DIO_PORTB_REG, A_u8PinNo); break;
    11a2:	a8 e3       	ldi	r26, 0x38	; 56
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e8 e3       	ldi	r30, 0x38	; 56
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <MDIO_voidSetPinValue+0x122>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <MDIO_voidSetPinValue+0x11e>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	83 c0       	rjmp	.+262    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				case LOW : CLR_BIT(DIO_PORTB_REG, A_u8PinNo); break;
    11ca:	a8 e3       	ldi	r26, 0x38	; 56
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e8 e3       	ldi	r30, 0x38	; 56
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <MDIO_voidSetPinValue+0x14a>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <MDIO_voidSetPinValue+0x146>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	6e c0       	rjmp	.+220    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				}
				break;
		case PORTC:
				switch(A_u8PinValue)
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3f 83       	std	Y+7, r19	; 0x07
    11fc:	2e 83       	std	Y+6, r18	; 0x06
    11fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1200:	9f 81       	ldd	r25, Y+7	; 0x07
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	d1 f0       	breq	.+52     	; 0x123a <MDIO_voidSetPinValue+0x19c>
    1206:	2e 81       	ldd	r18, Y+6	; 0x06
    1208:	3f 81       	ldd	r19, Y+7	; 0x07
    120a:	21 30       	cpi	r18, 0x01	; 1
    120c:	31 05       	cpc	r19, r1
    120e:	09 f0       	breq	.+2      	; 0x1212 <MDIO_voidSetPinValue+0x174>
    1210:	5f c0       	rjmp	.+190    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				{
				case HIGH: SET_BIT(DIO_PORTC_REG, A_u8PinNo); break;
    1212:	a5 e3       	ldi	r26, 0x35	; 53
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e5 e3       	ldi	r30, 0x35	; 53
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <MDIO_voidSetPinValue+0x192>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <MDIO_voidSetPinValue+0x18e>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	4b c0       	rjmp	.+150    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				case LOW : CLR_BIT(DIO_PORTC_REG, A_u8PinNo); break;
    123a:	a5 e3       	ldi	r26, 0x35	; 53
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e3       	ldi	r30, 0x35	; 53
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <MDIO_voidSetPinValue+0x1ba>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <MDIO_voidSetPinValue+0x1b6>
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	36 c0       	rjmp	.+108    	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				}
				break;
		case PORTD:
				switch(A_u8PinValue)
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3d 83       	std	Y+5, r19	; 0x05
    126c:	2c 83       	std	Y+4, r18	; 0x04
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	c9 f0       	breq	.+50     	; 0x12a8 <MDIO_voidSetPinValue+0x20a>
    1276:	2c 81       	ldd	r18, Y+4	; 0x04
    1278:	3d 81       	ldd	r19, Y+5	; 0x05
    127a:	21 30       	cpi	r18, 0x01	; 1
    127c:	31 05       	cpc	r19, r1
    127e:	41 f5       	brne	.+80     	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				{
				case HIGH: SET_BIT(DIO_PORTD_REG, A_u8PinNo); break;
    1280:	a2 e3       	ldi	r26, 0x32	; 50
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <MDIO_voidSetPinValue+0x200>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <MDIO_voidSetPinValue+0x1fc>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <MDIO_voidSetPinValue+0x232>
				case LOW : CLR_BIT(DIO_PORTD_REG, A_u8PinNo); break;
    12a8:	a2 e3       	ldi	r26, 0x32	; 50
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e2 e3       	ldi	r30, 0x32	; 50
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <MDIO_voidSetPinValue+0x228>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <MDIO_voidSetPinValue+0x224>
    12ca:	80 95       	com	r24
    12cc:	84 23       	and	r24, r20
    12ce:	8c 93       	st	X, r24
				}
				break;
		}

		}
}
    12d0:	2d 96       	adiw	r28, 0x0d	; 13
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <MDIO_u8GetPinValue>:
u8   MDIO_u8GetPinValue 	 (u8 A_u8PortNo,u8 A_u8PinNo)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <MDIO_u8GetPinValue+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <MDIO_u8GetPinValue+0x8>
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue = 5;
    12f4:	85 e0       	ldi	r24, 0x05	; 5
    12f6:	89 83       	std	Y+1, r24	; 0x01
	if((A_u8PortNo <= PORTD) && (A_u8PinNo <= PIN7))
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <MDIO_u8GetPinValue+0x1e>
    12fe:	6b c0       	rjmp	.+214    	; 0x13d6 <MDIO_u8GetPinValue+0xf4>
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	88 30       	cpi	r24, 0x08	; 8
    1304:	08 f0       	brcs	.+2      	; 0x1308 <MDIO_u8GetPinValue+0x26>
    1306:	67 c0       	rjmp	.+206    	; 0x13d6 <MDIO_u8GetPinValue+0xf4>
	{
	switch(A_u8PortNo)
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3d 83       	std	Y+5, r19	; 0x05
    1310:	2c 83       	std	Y+4, r18	; 0x04
    1312:	4c 81       	ldd	r20, Y+4	; 0x04
    1314:	5d 81       	ldd	r21, Y+5	; 0x05
    1316:	41 30       	cpi	r20, 0x01	; 1
    1318:	51 05       	cpc	r21, r1
    131a:	41 f1       	breq	.+80     	; 0x136c <MDIO_u8GetPinValue+0x8a>
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	91 05       	cpc	r25, r1
    1324:	34 f4       	brge	.+12     	; 0x1332 <MDIO_u8GetPinValue+0x50>
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	3d 81       	ldd	r19, Y+5	; 0x05
    132a:	21 15       	cp	r18, r1
    132c:	31 05       	cpc	r19, r1
    132e:	61 f0       	breq	.+24     	; 0x1348 <MDIO_u8GetPinValue+0x66>
    1330:	52 c0       	rjmp	.+164    	; 0x13d6 <MDIO_u8GetPinValue+0xf4>
    1332:	4c 81       	ldd	r20, Y+4	; 0x04
    1334:	5d 81       	ldd	r21, Y+5	; 0x05
    1336:	42 30       	cpi	r20, 0x02	; 2
    1338:	51 05       	cpc	r21, r1
    133a:	51 f1       	breq	.+84     	; 0x1390 <MDIO_u8GetPinValue+0xae>
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	9d 81       	ldd	r25, Y+5	; 0x05
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	91 05       	cpc	r25, r1
    1344:	b9 f1       	breq	.+110    	; 0x13b4 <MDIO_u8GetPinValue+0xd2>
    1346:	47 c0       	rjmp	.+142    	; 0x13d6 <MDIO_u8GetPinValue+0xf4>
	{
	case PORTA: Local_u8PinValue= GET_BIT(DIO_PINA_REG,A_u8PinNo); break;
    1348:	e9 e3       	ldi	r30, 0x39	; 57
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <MDIO_u8GetPinValue+0x7e>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <MDIO_u8GetPinValue+0x7a>
    1364:	ca 01       	movw	r24, r20
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	35 c0       	rjmp	.+106    	; 0x13d6 <MDIO_u8GetPinValue+0xf4>
	case PORTB: Local_u8PinValue= GET_BIT(DIO_PINB_REG,A_u8PinNo); break;
    136c:	e6 e3       	ldi	r30, 0x36	; 54
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <MDIO_u8GetPinValue+0xa2>
    1380:	55 95       	asr	r21
    1382:	47 95       	ror	r20
    1384:	8a 95       	dec	r24
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <MDIO_u8GetPinValue+0x9e>
    1388:	ca 01       	movw	r24, r20
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	23 c0       	rjmp	.+70     	; 0x13d6 <MDIO_u8GetPinValue+0xf4>
	case PORTC: Local_u8PinValue= GET_BIT(DIO_PINC_REG,A_u8PinNo); break;
    1390:	e3 e3       	ldi	r30, 0x33	; 51
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a9 01       	movw	r20, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <MDIO_u8GetPinValue+0xc6>
    13a4:	55 95       	asr	r21
    13a6:	47 95       	ror	r20
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <MDIO_u8GetPinValue+0xc2>
    13ac:	ca 01       	movw	r24, r20
    13ae:	81 70       	andi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	11 c0       	rjmp	.+34     	; 0x13d6 <MDIO_u8GetPinValue+0xf4>
	case PORTD: Local_u8PinValue= GET_BIT(DIO_PIND_REG,A_u8PinNo); break;
    13b4:	e0 e3       	ldi	r30, 0x30	; 48
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a9 01       	movw	r20, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <MDIO_u8GetPinValue+0xea>
    13c8:	55 95       	asr	r21
    13ca:	47 95       	ror	r20
    13cc:	8a 95       	dec	r24
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <MDIO_u8GetPinValue+0xe6>
    13d0:	ca 01       	movw	r24, r20
    13d2:	81 70       	andi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
	}

	}
	return Local_u8PinValue;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8PortNo,u8 A_u8PortDirection)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <MDIO_voidSetPortDirection+0x6>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <MDIO_voidSetPortDirection+0x8>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8PortNo<= PORTD){
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	84 30       	cpi	r24, 0x04	; 4
    13fc:	90 f5       	brcc	.+100    	; 0x1462 <MDIO_voidSetPortDirection+0x7a>
	switch(A_u8PortNo)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3c 83       	std	Y+4, r19	; 0x04
    1406:	2b 83       	std	Y+3, r18	; 0x03
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	d1 f0       	breq	.+52     	; 0x1446 <MDIO_voidSetPortDirection+0x5e>
    1412:	2b 81       	ldd	r18, Y+3	; 0x03
    1414:	3c 81       	ldd	r19, Y+4	; 0x04
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	2c f4       	brge	.+10     	; 0x1426 <MDIO_voidSetPortDirection+0x3e>
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	61 f0       	breq	.+24     	; 0x143c <MDIO_voidSetPortDirection+0x54>
    1424:	1e c0       	rjmp	.+60     	; 0x1462 <MDIO_voidSetPortDirection+0x7a>
    1426:	2b 81       	ldd	r18, Y+3	; 0x03
    1428:	3c 81       	ldd	r19, Y+4	; 0x04
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	81 f0       	breq	.+32     	; 0x1450 <MDIO_voidSetPortDirection+0x68>
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	91 05       	cpc	r25, r1
    1438:	81 f0       	breq	.+32     	; 0x145a <MDIO_voidSetPortDirection+0x72>
    143a:	13 c0       	rjmp	.+38     	; 0x1462 <MDIO_voidSetPortDirection+0x7a>
	{
	case PORTA: DIO_DDRA_REG= A_u8PortDirection; break;
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	80 83       	st	Z, r24
    1444:	0e c0       	rjmp	.+28     	; 0x1462 <MDIO_voidSetPortDirection+0x7a>
	case PORTB: DIO_DDRB_REG= A_u8PortDirection; break;
    1446:	e7 e3       	ldi	r30, 0x37	; 55
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	80 83       	st	Z, r24
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <MDIO_voidSetPortDirection+0x7a>
	case PORTC: DIO_DDRC_REG= A_u8PortDirection; break;
    1450:	e4 e3       	ldi	r30, 0x34	; 52
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	80 83       	st	Z, r24
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <MDIO_voidSetPortDirection+0x7a>
	case PORTD: DIO_DDRD_REG= A_u8PortDirection; break;
    145a:	e1 e3       	ldi	r30, 0x31	; 49
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	80 83       	st	Z, r24
	}
	}
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue	  (u8 A_u8PortNo,u8 A_u8PortValue)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <MDIO_voidSetPortValue+0x6>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <MDIO_voidSetPortValue+0x8>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8PortNo<= PORTD){
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	90 f5       	brcc	.+100    	; 0x14ea <MDIO_voidSetPortValue+0x7a>
	switch(A_u8PortNo)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3c 83       	std	Y+4, r19	; 0x04
    148e:	2b 83       	std	Y+3, r18	; 0x03
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	d1 f0       	breq	.+52     	; 0x14ce <MDIO_voidSetPortValue+0x5e>
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <MDIO_voidSetPortValue+0x3e>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <MDIO_voidSetPortValue+0x54>
    14ac:	1e c0       	rjmp	.+60     	; 0x14ea <MDIO_voidSetPortValue+0x7a>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	81 f0       	breq	.+32     	; 0x14d8 <MDIO_voidSetPortValue+0x68>
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	81 f0       	breq	.+32     	; 0x14e2 <MDIO_voidSetPortValue+0x72>
    14c2:	13 c0       	rjmp	.+38     	; 0x14ea <MDIO_voidSetPortValue+0x7a>
		{
	// PORTA=0xff;
		case PORTA:	DIO_PORTA_REG= A_u8PortValue;break;
    14c4:	eb e3       	ldi	r30, 0x3B	; 59
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	80 83       	st	Z, r24
    14cc:	0e c0       	rjmp	.+28     	; 0x14ea <MDIO_voidSetPortValue+0x7a>
		case PORTB: DIO_PORTB_REG= A_u8PortValue;break;
    14ce:	e8 e3       	ldi	r30, 0x38	; 56
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	80 83       	st	Z, r24
    14d6:	09 c0       	rjmp	.+18     	; 0x14ea <MDIO_voidSetPortValue+0x7a>
		case PORTC: DIO_PORTC_REG= A_u8PortValue;break;
    14d8:	e5 e3       	ldi	r30, 0x35	; 53
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	80 83       	st	Z, r24
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <MDIO_voidSetPortValue+0x7a>
		case PORTD: DIO_PORTD_REG= A_u8PortValue;break;
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	80 83       	st	Z, r24
		}
	}
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <MADC_vInit>:
void (*ADC_Callback_2)(u16 A_u16ADC_Data);
u16*  G_pu16ADC_Data;
FlagStatus_t xAdcFlag = ADC_NOT_COMPLETE ;

void MADC_vInit(void)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	/* 1- Reference voltage selection */
#if ADC_REF_VOLT==AVCC
	CLR_BIT(ADMUX, REFS1);
    1500:	a7 e2       	ldi	r26, 0x27	; 39
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e7 e2       	ldi	r30, 0x27	; 39
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	8f 77       	andi	r24, 0x7F	; 127
    150c:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS0);
    150e:	a7 e2       	ldi	r26, 0x27	; 39
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e7 e2       	ldi	r30, 0x27	; 39
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	80 64       	ori	r24, 0x40	; 64
    151a:	8c 93       	st	X, r24
#else
#error "Please select correct refence voltage"
#endif

	/* 2- Data Adjustment direction  */
	CLR_BIT(ADMUX, ADLAR);
    151c:	a7 e2       	ldi	r26, 0x27	; 39
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e7 e2       	ldi	r30, 0x27	; 39
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8f 7d       	andi	r24, 0xDF	; 223
    1528:	8c 93       	st	X, r24
	/* 3- Select Prescaler Bits    */
	ADCSRA = (ADCSRA & 0xF8) | (ADC_PRESCALER) ;
    152a:	a6 e2       	ldi	r26, 0x26	; 38
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e6 e2       	ldi	r30, 0x26	; 38
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	88 7f       	andi	r24, 0xF8	; 248
    1536:	83 60       	ori	r24, 0x03	; 3
    1538:	8c 93       	st	X, r24
	/* 4- Auto trigger Enable     */
	/*  4a- Select Auto trigger source  */
	CLR_BIT(ADCSRA, ADATE);
    153a:	a6 e2       	ldi	r26, 0x26	; 38
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e6 e2       	ldi	r30, 0x26	; 38
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8f 7d       	andi	r24, 0xDF	; 223
    1546:	8c 93       	st	X, r24
	/* 5- Interrupt Enable/disable    */
#if ADC_INTERRUPT_ENABLE==DISABLE
	CLR_BIT(ADCSRA, ADIE);
#elif ADC_INTERRUPT_ENABLE==ENABLE
	SET_BIT(ADCSRA, ADIE);
    1548:	a6 e2       	ldi	r26, 0x26	; 38
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e6 e2       	ldi	r30, 0x26	; 38
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	88 60       	ori	r24, 0x08	; 8
    1554:	8c 93       	st	X, r24
#endif
	/* 6- Enable ADC peripheral   */
	SET_BIT(ADCSRA, ADEN);
    1556:	a6 e2       	ldi	r26, 0x26	; 38
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e6 e2       	ldi	r30, 0x26	; 38
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 68       	ori	r24, 0x80	; 128
    1562:	8c 93       	st	X, r24
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <MADC_u16AnalogRead>:

u16  MADC_u16AnalogRead(u8 A_u8ChannelNo )
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	89 83       	std	Y+1, r24	; 0x01
	/* 1- Select Channel   */
	ADMUX = (ADMUX & 0xE0) | (A_u8ChannelNo & 0x07) ;
    1576:	a7 e2       	ldi	r26, 0x27	; 39
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e7 e2       	ldi	r30, 0x27	; 39
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	98 2f       	mov	r25, r24
    1582:	90 7e       	andi	r25, 0xE0	; 224
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	87 70       	andi	r24, 0x07	; 7
    1588:	89 2b       	or	r24, r25
    158a:	8c 93       	st	X, r24
	/* 2- Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    158c:	a6 e2       	ldi	r26, 0x26	; 38
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e6 e2       	ldi	r30, 0x26	; 38
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 64       	ori	r24, 0x40	; 64
    1598:	8c 93       	st	X, r24
	/* 3- Poll on Flag     */
	while( GET_BIT(ADCSRA, ADIF) != 1 ){}
    159a:	e6 e2       	ldi	r30, 0x26	; 38
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	82 95       	swap	r24
    15a2:	8f 70       	andi	r24, 0x0F	; 15
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	81 70       	andi	r24, 0x01	; 1
    15aa:	90 70       	andi	r25, 0x00	; 0
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	a9 f3       	breq	.-22     	; 0x159a <MADC_u16AnalogRead+0x30>
	/* 4- Clear Flag       */
	SET_BIT(ADCSRA, ADIF);
    15b0:	a6 e2       	ldi	r26, 0x26	; 38
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e6 e2       	ldi	r30, 0x26	; 38
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	80 61       	ori	r24, 0x10	; 16
    15bc:	8c 93       	st	X, r24
	/* 5- return ADC Data  */
	return ADC;
    15be:	e4 e2       	ldi	r30, 0x24	; 36
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
}
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <MADC_vStartConversion>:


void MADC_vStartConversion(u8 A_u8ChannelNo)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
	/* 1- Select Channel   */
	ADMUX = (ADMUX & 0xE0) | (A_u8ChannelNo & 0x07) ;
    15da:	a7 e2       	ldi	r26, 0x27	; 39
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e7 e2       	ldi	r30, 0x27	; 39
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	98 2f       	mov	r25, r24
    15e6:	90 7e       	andi	r25, 0xE0	; 224
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	87 70       	andi	r24, 0x07	; 7
    15ec:	89 2b       	or	r24, r25
    15ee:	8c 93       	st	X, r24
	/* 2- Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    15f0:	a6 e2       	ldi	r26, 0x26	; 38
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e6 e2       	ldi	r30, 0x26	; 38
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	80 64       	ori	r24, 0x40	; 64
    15fc:	8c 93       	st	X, r24
}
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <MADC_u16GetADCData>:

u16   MADC_u16GetADCData(void)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	/* 5- return ADC Data  */
	return ADC;
    160e:	e4 e2       	ldi	r30, 0x24	; 36
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	91 81       	ldd	r25, Z+1	; 0x01
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <MADC_xGetFlagStatus>:

FlagStatus_t    MADC_xGetFlagStatus(void)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62

	if(GET_BIT(ADCSRA, ADIF) == 1)
    1624:	e6 e2       	ldi	r30, 0x26	; 38
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	82 95       	swap	r24
    162c:	8f 70       	andi	r24, 0x0F	; 15
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	81 70       	andi	r24, 0x01	; 1
    1634:	90 70       	andi	r25, 0x00	; 0
    1636:	88 23       	and	r24, r24
    1638:	11 f0       	breq	.+4      	; 0x163e <MADC_xGetFlagStatus+0x22>
	{
		xAdcFlag = ADC_COMPLETE ;
    163a:	10 92 6a 00 	sts	0x006A, r1
	}
	return xAdcFlag ;
    163e:	80 91 6a 00 	lds	r24, 0x006A
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <MADC_vSetCallback>:

void MADC_vSetCallback( void (*A_fptr)(void)  )
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <MADC_vSetCallback+0x6>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	89 83       	std	Y+1, r24	; 0x01
	ADC_Callback = A_fptr;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	90 93 99 00 	sts	0x0099, r25
    165e:	80 93 98 00 	sts	0x0098, r24
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <MADC_vStartADCConversion_Asynch>:

void MADC_vStartADCConversion_Asynch(u8 A_u8ChannelNo   ,
									 u16* A_pu16ADCData ,
									 void (*A_fptr)(void) )
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	00 d0       	rcall	.+0      	; 0x1672 <MADC_vStartADCConversion_Asynch+0x6>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <MADC_vStartADCConversion_Asynch+0x8>
    1674:	0f 92       	push	r0
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	7b 83       	std	Y+3, r23	; 0x03
    167e:	6a 83       	std	Y+2, r22	; 0x02
    1680:	5d 83       	std	Y+5, r21	; 0x05
    1682:	4c 83       	std	Y+4, r20	; 0x04
	/* 1- set Call back function pointer */
	ADC_Callback = A_fptr ;
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	90 93 99 00 	sts	0x0099, r25
    168c:	80 93 98 00 	sts	0x0098, r24
	/* 2- set ADC data pointer */
	G_pu16ADC_Data = A_pu16ADCData ;
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	9b 81       	ldd	r25, Y+3	; 0x03
    1694:	90 93 9b 00 	sts	0x009B, r25
    1698:	80 93 9a 00 	sts	0x009A, r24

	/* 3- Select Channel   */
		ADMUX = (ADMUX & 0xE0) | (A_u8ChannelNo & 0x07) ;
    169c:	a7 e2       	ldi	r26, 0x27	; 39
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e7 e2       	ldi	r30, 0x27	; 39
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	98 2f       	mov	r25, r24
    16a8:	90 7e       	andi	r25, 0xE0	; 224
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	87 70       	andi	r24, 0x07	; 7
    16ae:	89 2b       	or	r24, r25
    16b0:	8c 93       	st	X, r24
	/* 4- Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    16b2:	a6 e2       	ldi	r26, 0x26	; 38
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e6 e2       	ldi	r30, 0x26	; 38
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	80 64       	ori	r24, 0x40	; 64
    16be:	8c 93       	st	X, r24
}
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <__vector_16>:


/* ADC_ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
    16d0:	1f 92       	push	r1
    16d2:	0f 92       	push	r0
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	0f 92       	push	r0
    16d8:	11 24       	eor	r1, r1
    16da:	2f 93       	push	r18
    16dc:	3f 93       	push	r19
    16de:	4f 93       	push	r20
    16e0:	5f 93       	push	r21
    16e2:	6f 93       	push	r22
    16e4:	7f 93       	push	r23
    16e6:	8f 93       	push	r24
    16e8:	9f 93       	push	r25
    16ea:	af 93       	push	r26
    16ec:	bf 93       	push	r27
    16ee:	ef 93       	push	r30
    16f0:	ff 93       	push	r31
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62

	if(G_pu16ADC_Data != NULL)
    16fa:	80 91 9a 00 	lds	r24, 0x009A
    16fe:	90 91 9b 00 	lds	r25, 0x009B
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	59 f0       	breq	.+22     	; 0x171c <__vector_16+0x4c>
	{
		*G_pu16ADC_Data = ADC ;
    1706:	e0 91 9a 00 	lds	r30, 0x009A
    170a:	f0 91 9b 00 	lds	r31, 0x009B
    170e:	a4 e2       	ldi	r26, 0x24	; 36
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	8d 91       	ld	r24, X+
    1714:	9c 91       	ld	r25, X
    1716:	11 97       	sbiw	r26, 0x01	; 1
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24
	}

	if(ADC_Callback != NULL)
    171c:	80 91 98 00 	lds	r24, 0x0098
    1720:	90 91 99 00 	lds	r25, 0x0099
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	49 f0       	breq	.+18     	; 0x173a <__vector_16+0x6a>
	{
//		 ADC_Callback();
		ADC_Callback_2(ADC);
    1728:	e0 91 96 00 	lds	r30, 0x0096
    172c:	f0 91 97 00 	lds	r31, 0x0097
    1730:	a4 e2       	ldi	r26, 0x24	; 36
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	8d 91       	ld	r24, X+
    1736:	9c 91       	ld	r25, X
    1738:	09 95       	icall
	}
	 xAdcFlag = ADC_COMPLETE ;
    173a:	10 92 6a 00 	sts	0x006A, r1
}
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	0f 90       	pop	r0
    1760:	1f 90       	pop	r1
    1762:	18 95       	reti

00001764 <SSD_voidInit>:
		0b01101111   //9

};

void SSD_voidInit(u8 u8SSD_Port)
	{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	0f 92       	push	r0
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPortDirection(u8SSD_Port, OUTPUT);
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <MDIO_voidSetPortDirection>
	}
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <SSD_voidDisplayNumer>:

void SSD_voidDisplayNumer(u8 u8SSDPort, u8 u8Num)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <SSD_voidDisplayNumer+0x6>
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	6a 83       	std	Y+2, r22	; 0x02
	if(u8Num<10)
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	8a 30       	cpi	r24, 0x0A	; 10
    1792:	58 f4       	brcc	.+22     	; 0x17aa <SSD_voidDisplayNumer+0x2a>
	{
#if SSD_TYPE == cathode
		MDIO_voidSetPortValue(u8SSDPort,SSD_grid[u8Num]);
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	fc 01       	movw	r30, r24
    179c:	e5 59       	subi	r30, 0x95	; 149
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	90 81       	ld	r25, Z
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	69 2f       	mov	r22, r25
    17a6:	0e 94 38 0a 	call	0x1470	; 0x1470 <MDIO_voidSetPortValue>
#elif SSD_TYPE == anode
		MDIO_voidSetPortValue(u8SSDPort,~SSD_grid[u8Num]);
#endif
	}
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <SSD_voidDisp2digts>:




void SSD_voidDisp2digts(u8 u8SSDPort1,u8 u8SSDPort2, u8 u8Num)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <SSD_voidDisp2digts+0x6>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <SSD_voidDisp2digts+0x8>
    17bc:	0f 92       	push	r0
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	8b 83       	std	Y+3, r24	; 0x03
    17c4:	6c 83       	std	Y+4, r22	; 0x04
    17c6:	4d 83       	std	Y+5, r20	; 0x05
	if (u8Num <100)
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	84 36       	cpi	r24, 0x64	; 100
    17cc:	a8 f4       	brcc	.+42     	; 0x17f8 <SSD_voidDisp2digts+0x44>
	{
		u8 dig1 = u8Num % 10;
    17ce:	8d 81       	ldd	r24, Y+5	; 0x05
    17d0:	9a e0       	ldi	r25, 0x0A	; 10
    17d2:	69 2f       	mov	r22, r25
    17d4:	0e 94 86 14 	call	0x290c	; 0x290c <__udivmodqi4>
    17d8:	89 2f       	mov	r24, r25
    17da:	8a 83       	std	Y+2, r24	; 0x02
		u8 dig2 = u8Num / 10;
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9a e0       	ldi	r25, 0x0A	; 10
    17e0:	69 2f       	mov	r22, r25
    17e2:	0e 94 86 14 	call	0x290c	; 0x290c <__udivmodqi4>
    17e6:	89 83       	std	Y+1, r24	; 0x01

		SSD_voidDisplayNumer(u8SSDPort1, dig1);
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	6a 81       	ldd	r22, Y+2	; 0x02
    17ec:	0e 94 c0 0b 	call	0x1780	; 0x1780 <SSD_voidDisplayNumer>
		SSD_voidDisplayNumer(u8SSDPort2, dig2);
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	69 81       	ldd	r22, Y+1	; 0x01
    17f4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <SSD_voidDisplayNumer>
	}


}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <SSD_voidTurnOff>:


void SSD_voidTurnOff(u8 u8SSDPort){
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	0f 92       	push	r0
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	89 83       	std	Y+1, r24	; 0x01
#if SSD_TYPE == cathode
	MDIO_voidSetPortValue(u8SSDPort,0x00);
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	0e 94 38 0a 	call	0x1470	; 0x1470 <MDIO_voidSetPortValue>
#elif SSD_TYPE == anode
	MDIO_voidSetPortValue(u8SSDPort,0xff);
#endif
}
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <SSD_voidCountUp>:


void SSD_voidCountUp(u8 u8SSDPort, u8 u8Num)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	61 97       	sbiw	r28, 0x11	; 17
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	88 8b       	std	Y+16, r24	; 0x10
    183a:	69 8b       	std	Y+17, r22	; 0x11
	for ( u8 counter=u8Num ; counter <= nine ; counter++ )
    183c:	89 89       	ldd	r24, Y+17	; 0x11
    183e:	8f 87       	std	Y+15, r24	; 0x0f
    1840:	79 c0       	rjmp	.+242    	; 0x1934 <SSD_voidCountUp+0x110>
	{
		SSD_voidDisplayNumer(u8SSDPort, counter);
    1842:	88 89       	ldd	r24, Y+16	; 0x10
    1844:	6f 85       	ldd	r22, Y+15	; 0x0f
    1846:	0e 94 c0 0b 	call	0x1780	; 0x1780 <SSD_voidDisplayNumer>
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	aa e7       	ldi	r26, 0x7A	; 122
    1850:	b4 e4       	ldi	r27, 0x44	; 68
    1852:	8b 87       	std	Y+11, r24	; 0x0b
    1854:	9c 87       	std	Y+12, r25	; 0x0c
    1856:	ad 87       	std	Y+13, r26	; 0x0d
    1858:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185a:	6b 85       	ldd	r22, Y+11	; 0x0b
    185c:	7c 85       	ldd	r23, Y+12	; 0x0c
    185e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1860:	9e 85       	ldd	r25, Y+14	; 0x0e
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	4a ef       	ldi	r20, 0xFA	; 250
    1868:	54 e4       	ldi	r21, 0x44	; 68
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8f 83       	std	Y+7, r24	; 0x07
    1874:	98 87       	std	Y+8, r25	; 0x08
    1876:	a9 87       	std	Y+9, r26	; 0x09
    1878:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    187a:	6f 81       	ldd	r22, Y+7	; 0x07
    187c:	78 85       	ldd	r23, Y+8	; 0x08
    187e:	89 85       	ldd	r24, Y+9	; 0x09
    1880:	9a 85       	ldd	r25, Y+10	; 0x0a
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    188e:	88 23       	and	r24, r24
    1890:	2c f4       	brge	.+10     	; 0x189c <SSD_voidCountUp+0x78>
		__ticks = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	3f c0       	rjmp	.+126    	; 0x191a <SSD_voidCountUp+0xf6>
	else if (__tmp > 65535)
    189c:	6f 81       	ldd	r22, Y+7	; 0x07
    189e:	78 85       	ldd	r23, Y+8	; 0x08
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	3f ef       	ldi	r19, 0xFF	; 255
    18a8:	4f e7       	ldi	r20, 0x7F	; 127
    18aa:	57 e4       	ldi	r21, 0x47	; 71
    18ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b0:	18 16       	cp	r1, r24
    18b2:	4c f5       	brge	.+82     	; 0x1906 <SSD_voidCountUp+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9e 83       	std	Y+6, r25	; 0x06
    18da:	8d 83       	std	Y+5, r24	; 0x05
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <SSD_voidCountUp+0xd8>
    18de:	88 ec       	ldi	r24, 0xC8	; 200
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9c 83       	std	Y+4, r25	; 0x04
    18e4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <SSD_voidCountUp+0xc6>
    18ee:	9c 83       	std	Y+4, r25	; 0x04
    18f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
    18fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	69 f7       	brne	.-38     	; 0x18de <SSD_voidCountUp+0xba>
    1904:	14 c0       	rjmp	.+40     	; 0x192e <SSD_voidCountUp+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1906:	6f 81       	ldd	r22, Y+7	; 0x07
    1908:	78 85       	ldd	r23, Y+8	; 0x08
    190a:	89 85       	ldd	r24, Y+9	; 0x09
    190c:	9a 85       	ldd	r25, Y+10	; 0x0a
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	9e 83       	std	Y+6, r25	; 0x06
    1918:	8d 83       	std	Y+5, r24	; 0x05
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <SSD_voidCountUp+0x102>
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	89 83       	std	Y+1, r24	; 0x01
}


void SSD_voidCountUp(u8 u8SSDPort, u8 u8Num)
{
	for ( u8 counter=u8Num ; counter <= nine ; counter++ )
    192e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1930:	8f 5f       	subi	r24, 0xFF	; 255
    1932:	8f 87       	std	Y+15, r24	; 0x0f
    1934:	8f 85       	ldd	r24, Y+15	; 0x0f
    1936:	8a 30       	cpi	r24, 0x0A	; 10
    1938:	08 f4       	brcc	.+2      	; 0x193c <SSD_voidCountUp+0x118>
    193a:	83 cf       	rjmp	.-250    	; 0x1842 <SSD_voidCountUp+0x1e>
	{
		SSD_voidDisplayNumer(u8SSDPort, counter);
		_delay_ms(delaytime);
	}

}
    193c:	61 96       	adiw	r28, 0x11	; 17
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <SSD_voidCountDown>:


void SSD_voidCountDown(u8 u8SSDPort, u8 u8Num)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	61 97       	sbiw	r28, 0x11	; 17
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	88 8b       	std	Y+16, r24	; 0x10
    1964:	69 8b       	std	Y+17, r22	; 0x11
	for (s8 counter=u8Num ; counter >= zero ; counter-- )
    1966:	89 89       	ldd	r24, Y+17	; 0x11
    1968:	8f 87       	std	Y+15, r24	; 0x0f
    196a:	7a c0       	rjmp	.+244    	; 0x1a60 <SSD_voidCountDown+0x112>
	{
		SSD_voidDisplayNumer(u8SSDPort, counter);
    196c:	9f 85       	ldd	r25, Y+15	; 0x0f
    196e:	88 89       	ldd	r24, Y+16	; 0x10
    1970:	69 2f       	mov	r22, r25
    1972:	0e 94 c0 0b 	call	0x1780	; 0x1780 <SSD_voidDisplayNumer>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	aa e7       	ldi	r26, 0x7A	; 122
    197c:	b4 e4       	ldi	r27, 0x44	; 68
    197e:	8b 87       	std	Y+11, r24	; 0x0b
    1980:	9c 87       	std	Y+12, r25	; 0x0c
    1982:	ad 87       	std	Y+13, r26	; 0x0d
    1984:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1986:	6b 85       	ldd	r22, Y+11	; 0x0b
    1988:	7c 85       	ldd	r23, Y+12	; 0x0c
    198a:	8d 85       	ldd	r24, Y+13	; 0x0d
    198c:	9e 85       	ldd	r25, Y+14	; 0x0e
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	4a ef       	ldi	r20, 0xFA	; 250
    1994:	54 e4       	ldi	r21, 0x44	; 68
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	8f 83       	std	Y+7, r24	; 0x07
    19a0:	98 87       	std	Y+8, r25	; 0x08
    19a2:	a9 87       	std	Y+9, r26	; 0x09
    19a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <SSD_voidCountDown+0x7a>
		__ticks = 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	3f c0       	rjmp	.+126    	; 0x1a46 <SSD_voidCountDown+0xf8>
	else if (__tmp > 65535)
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	89 85       	ldd	r24, Y+9	; 0x09
    19ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	57 e4       	ldi	r21, 0x47	; 71
    19d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	4c f5       	brge	.+82     	; 0x1a32 <SSD_voidCountDown+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	51 e4       	ldi	r21, 0x41	; 65
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <SSD_voidCountDown+0xda>
    1a0a:	88 ec       	ldi	r24, 0xC8	; 200
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <SSD_voidCountDown+0xc8>
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <SSD_voidCountDown+0xbc>
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <SSD_voidCountDown+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	6f 81       	ldd	r22, Y+7	; 0x07
    1a34:	78 85       	ldd	r23, Y+8	; 0x08
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <SSD_voidCountDown+0x104>
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
}


void SSD_voidCountDown(u8 u8SSDPort, u8 u8Num)
{
	for (s8 counter=u8Num ; counter >= zero ; counter-- )
    1a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5c:	81 50       	subi	r24, 0x01	; 1
    1a5e:	8f 87       	std	Y+15, r24	; 0x0f
    1a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a62:	88 23       	and	r24, r24
    1a64:	0c f0       	brlt	.+2      	; 0x1a68 <SSD_voidCountDown+0x11a>
    1a66:	82 cf       	rjmp	.-252    	; 0x196c <SSD_voidCountDown+0x1e>
	{
		SSD_voidDisplayNumer(u8SSDPort, counter);
		_delay_ms(delaytime);
	}
}
    1a68:	61 96       	adiw	r28, 0x11	; 17
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <HLCD_voidSendCommand>:
 */

#include "LCD_Init.h"


void HLCD_voidSendCommand(u8 A_u8cmd){
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	6d 97       	sbiw	r28, 0x1d	; 29
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Control RS and R/W Pins*/
	MDIO_voidSetPinValue(Control_Port,PIN0,LOW);
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Control_Port,PIN1,LOW);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
	/*write Command on the data Pins */
	MDIO_voidSetPortValue(Data_Port,A_u8cmd);
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1aa8:	0e 94 38 0a 	call	0x1470	; 0x1470 <MDIO_voidSetPortValue>
	/* Pulse on the Enable PIN*/
	MDIO_voidSetPinValue(Control_Port,PIN2,HIGH);
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e8       	ldi	r26, 0x80	; 128
    1abc:	bf e3       	ldi	r27, 0x3F	; 63
    1abe:	89 8f       	std	Y+25, r24	; 0x19
    1ac0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1acc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a ef       	ldi	r20, 0xFA	; 250
    1ad4:	54 e4       	ldi	r21, 0x44	; 68
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8d 8b       	std	Y+21, r24	; 0x15
    1ae0:	9e 8b       	std	Y+22, r25	; 0x16
    1ae2:	af 8b       	std	Y+23, r26	; 0x17
    1ae4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aea:	8f 89       	ldd	r24, Y+23	; 0x17
    1aec:	98 8d       	ldd	r25, Y+24	; 0x18
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9c 8b       	std	Y+20, r25	; 0x14
    1b04:	8b 8b       	std	Y+19, r24	; 0x13
    1b06:	3f c0       	rjmp	.+126    	; 0x1b86 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1b08:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	4c f5       	brge	.+82     	; 0x1b72 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	69 8d       	ldd	r22, Y+25	; 0x19
    1b22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9c 8b       	std	Y+20, r25	; 0x14
    1b46:	8b 8b       	std	Y+19, r24	; 0x13
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <HLCD_voidSendCommand+0xee>
    1b4a:	88 ec       	ldi	r24, 0xC8	; 200
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9a 8b       	std	Y+18, r25	; 0x12
    1b50:	89 8b       	std	Y+17, r24	; 0x11
    1b52:	89 89       	ldd	r24, Y+17	; 0x11
    1b54:	9a 89       	ldd	r25, Y+18	; 0x12
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <HLCD_voidSendCommand+0xdc>
    1b5a:	9a 8b       	std	Y+18, r25	; 0x12
    1b5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b60:	9c 89       	ldd	r25, Y+20	; 0x14
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	9c 8b       	std	Y+20, r25	; 0x14
    1b66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	69 f7       	brne	.-38     	; 0x1b4a <HLCD_voidSendCommand+0xd0>
    1b70:	14 c0       	rjmp	.+40     	; 0x1b9a <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	6d 89       	ldd	r22, Y+21	; 0x15
    1b74:	7e 89       	ldd	r23, Y+22	; 0x16
    1b76:	8f 89       	ldd	r24, Y+23	; 0x17
    1b78:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9c 8b       	std	Y+20, r25	; 0x14
    1b84:	8b 8b       	std	Y+19, r24	; 0x13
    1b86:	8b 89       	ldd	r24, Y+19	; 0x13
    1b88:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8a:	98 8b       	std	Y+16, r25	; 0x10
    1b8c:	8f 87       	std	Y+15, r24	; 0x0f
    1b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b90:	98 89       	ldd	r25, Y+16	; 0x10
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <HLCD_voidSendCommand+0x118>
    1b96:	98 8b       	std	Y+16, r25	; 0x10
    1b98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(Control_Port,PIN2,LOW);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	62 e0       	ldi	r22, 0x02	; 2
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e8       	ldi	r26, 0x80	; 128
    1baa:	bf e3       	ldi	r27, 0x3F	; 63
    1bac:	8b 87       	std	Y+11, r24	; 0x0b
    1bae:	9c 87       	std	Y+12, r25	; 0x0c
    1bb0:	ad 87       	std	Y+13, r26	; 0x0d
    1bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a ef       	ldi	r20, 0xFA	; 250
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8f 83       	std	Y+7, r24	; 0x07
    1bce:	98 87       	std	Y+8, r25	; 0x08
    1bd0:	a9 87       	std	Y+9, r26	; 0x09
    1bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <HLCD_voidSendCommand+0x1dc>
    1c38:	88 ec       	ldi	r24, 0xC8	; 200
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <HLCD_voidSendCommand+0x1ca>
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <HLCD_voidSendCommand+0x1be>
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <HLCD_voidSendCommand+0x206>
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1c88:	6d 96       	adiw	r28, 0x1d	; 29
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data){
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	6d 97       	sbiw	r28, 0x1d	; 29
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Control RS and R/W Pins*/
	MDIO_voidSetPinValue(Control_Port,PIN0,HIGH);
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(Control_Port,PIN1,LOW);
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	61 e0       	ldi	r22, 0x01	; 1
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
	/*write Command on the data Pins */
	MDIO_voidSetPortValue(Data_Port,A_u8Data);
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cc8:	0e 94 38 0a 	call	0x1470	; 0x1470 <MDIO_voidSetPortValue>
	/* Pulse on the Enable PIN*/
	MDIO_voidSetPinValue(Control_Port,PIN2,HIGH);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	62 e0       	ldi	r22, 0x02	; 2
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e8       	ldi	r26, 0x80	; 128
    1cdc:	bf e3       	ldi	r27, 0x3F	; 63
    1cde:	89 8f       	std	Y+25, r24	; 0x19
    1ce0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8d 8b       	std	Y+21, r24	; 0x15
    1d00:	9e 8b       	std	Y+22, r25	; 0x16
    1d02:	af 8b       	std	Y+23, r26	; 0x17
    1d04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d06:	6d 89       	ldd	r22, Y+21	; 0x15
    1d08:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1d28:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	69 8d       	ldd	r22, Y+25	; 0x19
    1d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <HLCD_voidSendData+0xee>
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	89 8b       	std	Y+17, r24	; 0x11
    1d72:	89 89       	ldd	r24, Y+17	; 0x11
    1d74:	9a 89       	ldd	r25, Y+18	; 0x12
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <HLCD_voidSendData+0xdc>
    1d7a:	9a 8b       	std	Y+18, r25	; 0x12
    1d7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <HLCD_voidSendData+0xd0>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
    1da6:	8b 89       	ldd	r24, Y+19	; 0x13
    1da8:	9c 89       	ldd	r25, Y+20	; 0x14
    1daa:	98 8b       	std	Y+16, r25	; 0x10
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
    1dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db0:	98 89       	ldd	r25, Y+16	; 0x10
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <HLCD_voidSendData+0x118>
    1db6:	98 8b       	std	Y+16, r25	; 0x10
    1db8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(Control_Port,PIN2,LOW);
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	62 e0       	ldi	r22, 0x02	; 2
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e8       	ldi	r26, 0x80	; 128
    1dca:	bf e3       	ldi	r27, 0x3F	; 63
    1dcc:	8b 87       	std	Y+11, r24	; 0x0b
    1dce:	9c 87       	std	Y+12, r25	; 0x0c
    1dd0:	ad 87       	std	Y+13, r26	; 0x0d
    1dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a ef       	ldi	r20, 0xFA	; 250
    1de2:	54 e4       	ldi	r21, 0x44	; 68
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	8f 83       	std	Y+7, r24	; 0x07
    1dee:	98 87       	std	Y+8, r25	; 0x08
    1df0:	a9 87       	std	Y+9, r26	; 0x09
    1df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df4:	6f 81       	ldd	r22, Y+7	; 0x07
    1df6:	78 85       	ldd	r23, Y+8	; 0x08
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	2c f4       	brge	.+10     	; 0x1e16 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	3f c0       	rjmp	.+126    	; 0x1e94 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	57 e4       	ldi	r21, 0x47	; 71
    1e26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	4c f5       	brge	.+82     	; 0x1e80 <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <HLCD_voidSendData+0x1dc>
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <HLCD_voidSendData+0x1ca>
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <HLCD_voidSendData+0x1be>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <HLCD_voidSendData+0x206>
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ea8:	6d 96       	adiw	r28, 0x1d	; 29
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <HLCD_voidInit>:

void HLCD_voidInit(){
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	e8 97       	sbiw	r28, 0x38	; 56
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a0 ef       	ldi	r26, 0xF0	; 240
    1ed4:	b1 e4       	ldi	r27, 0x41	; 65
    1ed6:	8d ab       	std	Y+53, r24	; 0x35
    1ed8:	9e ab       	std	Y+54, r25	; 0x36
    1eda:	af ab       	std	Y+55, r26	; 0x37
    1edc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ede:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	4a ef       	ldi	r20, 0xFA	; 250
    1eec:	54 e4       	ldi	r21, 0x44	; 68
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	89 ab       	std	Y+49, r24	; 0x31
    1ef8:	9a ab       	std	Y+50, r25	; 0x32
    1efa:	ab ab       	std	Y+51, r26	; 0x33
    1efc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1efe:	69 a9       	ldd	r22, Y+49	; 0x31
    1f00:	7a a9       	ldd	r23, Y+50	; 0x32
    1f02:	8b a9       	ldd	r24, Y+51	; 0x33
    1f04:	9c a9       	ldd	r25, Y+52	; 0x34
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e8       	ldi	r20, 0x80	; 128
    1f0c:	5f e3       	ldi	r21, 0x3F	; 63
    1f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f12:	88 23       	and	r24, r24
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <HLCD_voidInit+0x66>
		__ticks = 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	98 ab       	std	Y+48, r25	; 0x30
    1f1c:	8f a7       	std	Y+47, r24	; 0x2f
    1f1e:	3f c0       	rjmp	.+126    	; 0x1f9e <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1f20:	69 a9       	ldd	r22, Y+49	; 0x31
    1f22:	7a a9       	ldd	r23, Y+50	; 0x32
    1f24:	8b a9       	ldd	r24, Y+51	; 0x33
    1f26:	9c a9       	ldd	r25, Y+52	; 0x34
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	3f ef       	ldi	r19, 0xFF	; 255
    1f2c:	4f e7       	ldi	r20, 0x7F	; 127
    1f2e:	57 e4       	ldi	r21, 0x47	; 71
    1f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f34:	18 16       	cp	r1, r24
    1f36:	4c f5       	brge	.+82     	; 0x1f8a <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6d a9       	ldd	r22, Y+53	; 0x35
    1f3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	98 ab       	std	Y+48, r25	; 0x30
    1f5e:	8f a7       	std	Y+47, r24	; 0x2f
    1f60:	0f c0       	rjmp	.+30     	; 0x1f80 <HLCD_voidInit+0xc6>
    1f62:	88 ec       	ldi	r24, 0xC8	; 200
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9e a7       	std	Y+46, r25	; 0x2e
    1f68:	8d a7       	std	Y+45, r24	; 0x2d
    1f6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <HLCD_voidInit+0xb4>
    1f72:	9e a7       	std	Y+46, r25	; 0x2e
    1f74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f78:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	98 ab       	std	Y+48, r25	; 0x30
    1f7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f82:	98 a9       	ldd	r25, Y+48	; 0x30
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	69 f7       	brne	.-38     	; 0x1f62 <HLCD_voidInit+0xa8>
    1f88:	14 c0       	rjmp	.+40     	; 0x1fb2 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f90:	9c a9       	ldd	r25, Y+52	; 0x34
    1f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	98 ab       	std	Y+48, r25	; 0x30
    1f9c:	8f a7       	std	Y+47, r24	; 0x2f
    1f9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa2:	9c a7       	std	Y+44, r25	; 0x2c
    1fa4:	8b a7       	std	Y+43, r24	; 0x2b
    1fa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fa8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <HLCD_voidInit+0xf0>
    1fae:	9c a7       	std	Y+44, r25	; 0x2c
    1fb0:	8b a7       	std	Y+43, r24	; 0x2b
	// wait for 30ms
	_delay_ms(30);
	// function Set 0b00111100
	HLCD_voidSendCommand(LCD_functionSet);
    1fb2:	8c e3       	ldi	r24, 0x3C	; 60
    1fb4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <HLCD_voidSendCommand>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e8       	ldi	r26, 0x80	; 128
    1fbe:	bf e3       	ldi	r27, 0x3F	; 63
    1fc0:	8f a3       	std	Y+39, r24	; 0x27
    1fc2:	98 a7       	std	Y+40, r25	; 0x28
    1fc4:	a9 a7       	std	Y+41, r26	; 0x29
    1fc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fca:	78 a5       	ldd	r23, Y+40	; 0x28
    1fcc:	89 a5       	ldd	r24, Y+41	; 0x29
    1fce:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a ef       	ldi	r20, 0xFA	; 250
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8b a3       	std	Y+35, r24	; 0x23
    1fe2:	9c a3       	std	Y+36, r25	; 0x24
    1fe4:	ad a3       	std	Y+37, r26	; 0x25
    1fe6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fea:	7c a1       	ldd	r23, Y+36	; 0x24
    1fec:	8d a1       	ldd	r24, Y+37	; 0x25
    1fee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	2c f4       	brge	.+10     	; 0x200a <HLCD_voidInit+0x150>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9a a3       	std	Y+34, r25	; 0x22
    2006:	89 a3       	std	Y+33, r24	; 0x21
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    200a:	6b a1       	ldd	r22, Y+35	; 0x23
    200c:	7c a1       	ldd	r23, Y+36	; 0x24
    200e:	8d a1       	ldd	r24, Y+37	; 0x25
    2010:	9e a1       	ldd	r25, Y+38	; 0x26
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	4c f5       	brge	.+82     	; 0x2074 <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	6f a1       	ldd	r22, Y+39	; 0x27
    2024:	78 a5       	ldd	r23, Y+40	; 0x28
    2026:	89 a5       	ldd	r24, Y+41	; 0x29
    2028:	9a a5       	ldd	r25, Y+42	; 0x2a
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9a a3       	std	Y+34, r25	; 0x22
    2048:	89 a3       	std	Y+33, r24	; 0x21
    204a:	0f c0       	rjmp	.+30     	; 0x206a <HLCD_voidInit+0x1b0>
    204c:	88 ec       	ldi	r24, 0xC8	; 200
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	98 a3       	std	Y+32, r25	; 0x20
    2052:	8f 8f       	std	Y+31, r24	; 0x1f
    2054:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2056:	98 a1       	ldd	r25, Y+32	; 0x20
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <HLCD_voidInit+0x19e>
    205c:	98 a3       	std	Y+32, r25	; 0x20
    205e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	89 a1       	ldd	r24, Y+33	; 0x21
    2062:	9a a1       	ldd	r25, Y+34	; 0x22
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9a a3       	std	Y+34, r25	; 0x22
    2068:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	89 a1       	ldd	r24, Y+33	; 0x21
    206c:	9a a1       	ldd	r25, Y+34	; 0x22
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f7       	brne	.-38     	; 0x204c <HLCD_voidInit+0x192>
    2072:	14 c0       	rjmp	.+40     	; 0x209c <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	6b a1       	ldd	r22, Y+35	; 0x23
    2076:	7c a1       	ldd	r23, Y+36	; 0x24
    2078:	8d a1       	ldd	r24, Y+37	; 0x25
    207a:	9e a1       	ldd	r25, Y+38	; 0x26
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9a a3       	std	Y+34, r25	; 0x22
    2086:	89 a3       	std	Y+33, r24	; 0x21
    2088:	89 a1       	ldd	r24, Y+33	; 0x21
    208a:	9a a1       	ldd	r25, Y+34	; 0x22
    208c:	9e 8f       	std	Y+30, r25	; 0x1e
    208e:	8d 8f       	std	Y+29, r24	; 0x1d
    2090:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2092:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <HLCD_voidInit+0x1da>
    2098:	9e 8f       	std	Y+30, r25	; 0x1e
    209a:	8d 8f       	std	Y+29, r24	; 0x1d
	// wait for 39 us -> 1ms
	_delay_ms(1);
	// Display ON/OFF 0b00001100
	HLCD_voidSendCommand(LCD_DispalyOnOff);
    209c:	8c e0       	ldi	r24, 0x0C	; 12
    209e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <HLCD_voidSendCommand>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e8       	ldi	r26, 0x80	; 128
    20a8:	bf e3       	ldi	r27, 0x3F	; 63
    20aa:	89 8f       	std	Y+25, r24	; 0x19
    20ac:	9a 8f       	std	Y+26, r25	; 0x1a
    20ae:	ab 8f       	std	Y+27, r26	; 0x1b
    20b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	69 8d       	ldd	r22, Y+25	; 0x19
    20b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a ef       	ldi	r20, 0xFA	; 250
    20c0:	54 e4       	ldi	r21, 0x44	; 68
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8d 8b       	std	Y+21, r24	; 0x15
    20cc:	9e 8b       	std	Y+22, r25	; 0x16
    20ce:	af 8b       	std	Y+23, r26	; 0x17
    20d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d2:	6d 89       	ldd	r22, Y+21	; 0x15
    20d4:	7e 89       	ldd	r23, Y+22	; 0x16
    20d6:	8f 89       	ldd	r24, Y+23	; 0x17
    20d8:	98 8d       	ldd	r25, Y+24	; 0x18
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <HLCD_voidInit+0x23a>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    20f4:	6d 89       	ldd	r22, Y+21	; 0x15
    20f6:	7e 89       	ldd	r23, Y+22	; 0x16
    20f8:	8f 89       	ldd	r24, Y+23	; 0x17
    20fa:	98 8d       	ldd	r25, Y+24	; 0x18
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	69 8d       	ldd	r22, Y+25	; 0x19
    210e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2112:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9c 8b       	std	Y+20, r25	; 0x14
    2132:	8b 8b       	std	Y+19, r24	; 0x13
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <HLCD_voidInit+0x29a>
    2136:	88 ec       	ldi	r24, 0xC8	; 200
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9a 8b       	std	Y+18, r25	; 0x12
    213c:	89 8b       	std	Y+17, r24	; 0x11
    213e:	89 89       	ldd	r24, Y+17	; 0x11
    2140:	9a 89       	ldd	r25, Y+18	; 0x12
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <HLCD_voidInit+0x288>
    2146:	9a 8b       	std	Y+18, r25	; 0x12
    2148:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8b 89       	ldd	r24, Y+19	; 0x13
    214c:	9c 89       	ldd	r25, Y+20	; 0x14
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9c 8b       	std	Y+20, r25	; 0x14
    2152:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8b 89       	ldd	r24, Y+19	; 0x13
    2156:	9c 89       	ldd	r25, Y+20	; 0x14
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <HLCD_voidInit+0x27c>
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6d 89       	ldd	r22, Y+21	; 0x15
    2160:	7e 89       	ldd	r23, Y+22	; 0x16
    2162:	8f 89       	ldd	r24, Y+23	; 0x17
    2164:	98 8d       	ldd	r25, Y+24	; 0x18
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9c 8b       	std	Y+20, r25	; 0x14
    2170:	8b 8b       	std	Y+19, r24	; 0x13
    2172:	8b 89       	ldd	r24, Y+19	; 0x13
    2174:	9c 89       	ldd	r25, Y+20	; 0x14
    2176:	98 8b       	std	Y+16, r25	; 0x10
    2178:	8f 87       	std	Y+15, r24	; 0x0f
    217a:	8f 85       	ldd	r24, Y+15	; 0x0f
    217c:	98 89       	ldd	r25, Y+16	; 0x10
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <HLCD_voidInit+0x2c4>
    2182:	98 8b       	std	Y+16, r25	; 0x10
    2184:	8f 87       	std	Y+15, r24	; 0x0f
	// wait for 39 us -> 1ms
	_delay_ms(1);
	// Display clear 0b00000001
	HLCD_voidSendCommand(LCD_Dispalyclear);
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <HLCD_voidSendCommand>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e0       	ldi	r26, 0x00	; 0
    2192:	b0 e4       	ldi	r27, 0x40	; 64
    2194:	8b 87       	std	Y+11, r24	; 0x0b
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	ad 87       	std	Y+13, r26	; 0x0d
    219a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a ef       	ldi	r20, 0xFA	; 250
    21aa:	54 e4       	ldi	r21, 0x44	; 68
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8f 83       	std	Y+7, r24	; 0x07
    21b6:	98 87       	std	Y+8, r25	; 0x08
    21b8:	a9 87       	std	Y+9, r26	; 0x09
    21ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <HLCD_voidInit+0x324>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	0f c0       	rjmp	.+30     	; 0x223e <HLCD_voidInit+0x384>
    2220:	88 ec       	ldi	r24, 0xC8	; 200
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <HLCD_voidInit+0x372>
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <HLCD_voidInit+0x366>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <HLCD_voidInit+0x3ae>
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms -> 2ms
	_delay_ms(2);
	// Entry Mode 0b00000110
	HLCD_voidSendCommand(LCD_EntryMode);
    2270:	86 e0       	ldi	r24, 0x06	; 6
    2272:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <HLCD_voidSendCommand>
}
    2276:	e8 96       	adiw	r28, 0x38	; 56
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <HLCD_voidClear>:

void HLCD_voidClear(){
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	2e 97       	sbiw	r28, 0x0e	; 14
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_Dispalyclear);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <HLCD_voidSendCommand>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	a0 e0       	ldi	r26, 0x00	; 0
    22a8:	b0 e4       	ldi	r27, 0x40	; 64
    22aa:	8b 87       	std	Y+11, r24	; 0x0b
    22ac:	9c 87       	std	Y+12, r25	; 0x0c
    22ae:	ad 87       	std	Y+13, r26	; 0x0d
    22b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a ef       	ldi	r20, 0xFA	; 250
    22c0:	54 e4       	ldi	r21, 0x44	; 68
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8f 83       	std	Y+7, r24	; 0x07
    22cc:	98 87       	std	Y+8, r25	; 0x08
    22ce:	a9 87       	std	Y+9, r26	; 0x09
    22d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <HLCD_voidClear+0x6c>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    22f4:	6f 81       	ldd	r22, Y+7	; 0x07
    22f6:	78 85       	ldd	r23, Y+8	; 0x08
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	4f e7       	ldi	r20, 0x7F	; 127
    2302:	57 e4       	ldi	r21, 0x47	; 71
    2304:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2308:	18 16       	cp	r1, r24
    230a:	4c f5       	brge	.+82     	; 0x235e <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230c:	6b 85       	ldd	r22, Y+11	; 0x0b
    230e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2310:	8d 85       	ldd	r24, Y+13	; 0x0d
    2312:	9e 85       	ldd	r25, Y+14	; 0x0e
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <HLCD_voidClear+0xcc>
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <HLCD_voidClear+0xba>
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	8d 81       	ldd	r24, Y+5	; 0x05
    234c:	9e 81       	ldd	r25, Y+6	; 0x06
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <HLCD_voidClear+0xae>
    235c:	14 c0       	rjmp	.+40     	; 0x2386 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	6f 81       	ldd	r22, Y+7	; 0x07
    2360:	78 85       	ldd	r23, Y+8	; 0x08
    2362:	89 85       	ldd	r24, Y+9	; 0x09
    2364:	9a 85       	ldd	r25, Y+10	; 0x0a
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9e 83       	std	Y+6, r25	; 0x06
    2370:	8d 83       	std	Y+5, r24	; 0x05
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <HLCD_voidClear+0xf6>
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms -> 2ms
	_delay_ms(2);
}
    2386:	2e 96       	adiw	r28, 0x0e	; 14
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *A_u8PtrString){
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <HLCD_voidSendString+0x6>
    239e:	0f 92       	push	r0
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	9b 83       	std	Y+3, r25	; 0x03
    23a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8Counter = 0;
    23a8:	19 82       	std	Y+1, r1	; 0x01
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <HLCD_voidSendString+0x32>
	while(A_u8PtrString[L_u8Counter] != "\0"){

		HLCD_voidSendData( A_u8PtrString[L_u8Counter++]);
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	9b 81       	ldd	r25, Y+3	; 0x03
    23b6:	fc 01       	movw	r30, r24
    23b8:	e2 0f       	add	r30, r18
    23ba:	f3 1f       	adc	r31, r19
    23bc:	90 81       	ld	r25, Z
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	8f 5f       	subi	r24, 0xFF	; 255
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	89 2f       	mov	r24, r25
    23c6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <HLCD_voidSendData>
	_delay_ms(2);
}

void HLCD_voidSendString(u8 *A_u8PtrString){
	u8 L_u8Counter = 0;
	while(A_u8PtrString[L_u8Counter] != "\0"){
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	9b 81       	ldd	r25, Y+3	; 0x03
    23d4:	fc 01       	movw	r30, r24
    23d6:	e2 0f       	add	r30, r18
    23d8:	f3 1f       	adc	r31, r19
    23da:	80 81       	ld	r24, Z
    23dc:	88 2f       	mov	r24, r24
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	80 36       	cpi	r24, 0x60	; 96
    23e4:	92 07       	cpc	r25, r18
    23e6:	11 f7       	brne	.-60     	; 0x23ac <HLCD_voidSendString+0x14>

		HLCD_voidSendData( A_u8PtrString[L_u8Counter++]);
	}


}
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <HLCD_voidCursor>:

void HLCD_voidCursor(u8 A_u8LinePos , u8 A_u8LineNo){
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <HLCD_voidCursor+0x6>
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <HLCD_voidCursor+0x8>
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8LineNo){
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	3c 83       	std	Y+4, r19	; 0x04
    240c:	2b 83       	std	Y+3, r18	; 0x03
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	31 f0       	breq	.+12     	; 0x2422 <HLCD_voidCursor+0x2e>
    2416:	2b 81       	ldd	r18, Y+3	; 0x03
    2418:	3c 81       	ldd	r19, Y+4	; 0x04
    241a:	21 30       	cpi	r18, 0x01	; 1
    241c:	31 05       	cpc	r19, r1
    241e:	31 f0       	breq	.+12     	; 0x242c <HLCD_voidCursor+0x38>
    2420:	09 c0       	rjmp	.+18     	; 0x2434 <HLCD_voidCursor+0x40>

	case LCD_LINE0 : HLCD_voidSendCommand(0x80+ 0 + A_u8LinePos); break;
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	80 58       	subi	r24, 0x80	; 128
    2426:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <HLCD_voidSendCommand>
    242a:	04 c0       	rjmp	.+8      	; 0x2434 <HLCD_voidCursor+0x40>

	case LCD_LINE1 : HLCD_voidSendCommand(0x80+ 64+ A_u8LinePos); break;
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	80 54       	subi	r24, 0x40	; 64
    2430:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <HLCD_voidSendCommand>
	}
}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(s32 A_s32Number  ){
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	28 97       	sbiw	r28, 0x08	; 8
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	6d 83       	std	Y+5, r22	; 0x05
    2460:	7e 83       	std	Y+6, r23	; 0x06
    2462:	8f 83       	std	Y+7, r24	; 0x07
    2464:	98 87       	std	Y+8, r25	; 0x08
	u32 L_u32Number=1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	ab 83       	std	Y+3, r26	; 0x03
    2474:	bc 83       	std	Y+4, r27	; 0x04

	if(A_s32Number == 0){
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	af 81       	ldd	r26, Y+7	; 0x07
    247c:	b8 85       	ldd	r27, Y+8	; 0x08
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	a1 05       	cpc	r26, r1
    2482:	b1 05       	cpc	r27, r1
    2484:	19 f4       	brne	.+6      	; 0x248c <HLCD_voidDisplayNumber+0x4a>
		HLCD_voidSendData('0');
    2486:	80 e3       	ldi	r24, 0x30	; 48
    2488:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <HLCD_voidSendData>
	}
	if(A_s32Number <0){
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
    248e:	9e 81       	ldd	r25, Y+6	; 0x06
    2490:	af 81       	ldd	r26, Y+7	; 0x07
    2492:	b8 85       	ldd	r27, Y+8	; 0x08
    2494:	bb 23       	and	r27, r27
    2496:	0c f0       	brlt	.+2      	; 0x249a <HLCD_voidDisplayNumber+0x58>
    2498:	49 c0       	rjmp	.+146    	; 0x252c <HLCD_voidDisplayNumber+0xea>
		HLCD_voidSendData('-');
    249a:	8d e2       	ldi	r24, 0x2D	; 45
    249c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <HLCD_voidSendData>
		A_s32Number *=-1;
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	9e 81       	ldd	r25, Y+6	; 0x06
    24a4:	af 81       	ldd	r26, Y+7	; 0x07
    24a6:	b8 85       	ldd	r27, Y+8	; 0x08
    24a8:	b0 95       	com	r27
    24aa:	a0 95       	com	r26
    24ac:	90 95       	com	r25
    24ae:	81 95       	neg	r24
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	af 4f       	sbci	r26, 0xFF	; 255
    24b4:	bf 4f       	sbci	r27, 0xFF	; 255
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	af 83       	std	Y+7, r26	; 0x07
    24bc:	b8 87       	std	Y+8, r27	; 0x08
    24be:	36 c0       	rjmp	.+108    	; 0x252c <HLCD_voidDisplayNumber+0xea>
	}
	while(A_s32Number !=0 ){
		L_u32Number= ((L_u32Number*10)+(A_s32Number%10));
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	ab 81       	ldd	r26, Y+3	; 0x03
    24c6:	bc 81       	ldd	r27, Y+4	; 0x04
    24c8:	2a e0       	ldi	r18, 0x0A	; 10
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	50 e0       	ldi	r21, 0x00	; 0
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 67 14 	call	0x28ce	; 0x28ce <__mulsi3>
    24d8:	7b 01       	movw	r14, r22
    24da:	8c 01       	movw	r16, r24
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	9e 81       	ldd	r25, Y+6	; 0x06
    24e0:	af 81       	ldd	r26, Y+7	; 0x07
    24e2:	b8 85       	ldd	r27, Y+8	; 0x08
    24e4:	2a e0       	ldi	r18, 0x0A	; 10
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	0e 94 b4 14 	call	0x2968	; 0x2968 <__divmodsi4>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8e 0d       	add	r24, r14
    24fa:	9f 1d       	adc	r25, r15
    24fc:	a0 1f       	adc	r26, r16
    24fe:	b1 1f       	adc	r27, r17
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	ab 83       	std	Y+3, r26	; 0x03
    2506:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number= A_s32Number/10;
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	af 81       	ldd	r26, Y+7	; 0x07
    250e:	b8 85       	ldd	r27, Y+8	; 0x08
    2510:	2a e0       	ldi	r18, 0x0A	; 10
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e0       	ldi	r20, 0x00	; 0
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 b4 14 	call	0x2968	; 0x2968 <__divmodsi4>
    2520:	da 01       	movw	r26, r20
    2522:	c9 01       	movw	r24, r18
    2524:	8d 83       	std	Y+5, r24	; 0x05
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	af 83       	std	Y+7, r26	; 0x07
    252a:	b8 87       	std	Y+8, r27	; 0x08
	}
	if(A_s32Number <0){
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while(A_s32Number !=0 ){
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    2530:	af 81       	ldd	r26, Y+7	; 0x07
    2532:	b8 85       	ldd	r27, Y+8	; 0x08
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	a1 05       	cpc	r26, r1
    2538:	b1 05       	cpc	r27, r1
    253a:	11 f6       	brne	.-124    	; 0x24c0 <HLCD_voidDisplayNumber+0x7e>
    253c:	23 c0       	rjmp	.+70     	; 0x2584 <HLCD_voidDisplayNumber+0x142>
		L_u32Number= ((L_u32Number*10)+(A_s32Number%10));
		A_s32Number= A_s32Number/10;
	}
	while (L_u32Number !=1){

	HLCD_voidSendData((L_u32Number%10)+48);
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	ab 81       	ldd	r26, Y+3	; 0x03
    2544:	bc 81       	ldd	r27, Y+4	; 0x04
    2546:	2a e0       	ldi	r18, 0x0A	; 10
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	80 5d       	subi	r24, 0xD0	; 208
    255c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <HLCD_voidSendData>
		L_u32Number= L_u32Number/10;
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	9a 81       	ldd	r25, Y+2	; 0x02
    2564:	ab 81       	ldd	r26, Y+3	; 0x03
    2566:	bc 81       	ldd	r27, Y+4	; 0x04
    2568:	2a e0       	ldi	r18, 0x0A	; 10
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    2578:	da 01       	movw	r26, r20
    257a:	c9 01       	movw	r24, r18
    257c:	89 83       	std	Y+1, r24	; 0x01
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	ab 83       	std	Y+3, r26	; 0x03
    2582:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(A_s32Number !=0 ){
		L_u32Number= ((L_u32Number*10)+(A_s32Number%10));
		A_s32Number= A_s32Number/10;
	}
	while (L_u32Number !=1){
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	ab 81       	ldd	r26, Y+3	; 0x03
    258a:	bc 81       	ldd	r27, Y+4	; 0x04
    258c:	81 30       	cpi	r24, 0x01	; 1
    258e:	91 05       	cpc	r25, r1
    2590:	a1 05       	cpc	r26, r1
    2592:	b1 05       	cpc	r27, r1
    2594:	a1 f6       	brne	.-88     	; 0x253e <HLCD_voidDisplayNumber+0xfc>

	HLCD_voidSendData((L_u32Number%10)+48);
		L_u32Number= L_u32Number/10;
	}
}
    2596:	28 96       	adiw	r28, 0x08	; 8
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	08 95       	ret

000025b0 <HLCD_voidSaveCustomChar>:

void HLCD_voidSaveCustomChar(u8 A_u8CGRAMIndex, u8 A_u8CustomArray[]){
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <HLCD_voidSaveCustomChar+0x6>
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <HLCD_voidSaveCustomChar+0x8>
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	8a 83       	std	Y+2, r24	; 0x02
    25be:	7c 83       	std	Y+4, r23	; 0x04
    25c0:	6b 83       	std	Y+3, r22	; 0x03

	HLCD_voidSendCommand(0b01000000+(A_u8CGRAMIndex*8));
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	08 96       	adiw	r24, 0x08	; 8
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <HLCD_voidSendCommand>

		for(u8 L_u8Index=0 ;L_u8Index <8; L_u8Index++){
    25da:	19 82       	std	Y+1, r1	; 0x01
    25dc:	0e c0       	rjmp	.+28     	; 0x25fa <HLCD_voidSaveCustomChar+0x4a>
			HLCD_voidSendData(A_u8CustomArray[L_u8Index]);
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	9c 81       	ldd	r25, Y+4	; 0x04
    25e8:	fc 01       	movw	r30, r24
    25ea:	e2 0f       	add	r30, r18
    25ec:	f3 1f       	adc	r31, r19
    25ee:	80 81       	ld	r24, Z
    25f0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <HLCD_voidSendData>

void HLCD_voidSaveCustomChar(u8 A_u8CGRAMIndex, u8 A_u8CustomArray[]){

	HLCD_voidSendCommand(0b01000000+(A_u8CGRAMIndex*8));

		for(u8 L_u8Index=0 ;L_u8Index <8; L_u8Index++){
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	8f 5f       	subi	r24, 0xFF	; 255
    25f8:	89 83       	std	Y+1, r24	; 0x01
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	88 30       	cpi	r24, 0x08	; 8
    25fe:	78 f3       	brcs	.-34     	; 0x25de <HLCD_voidSaveCustomChar+0x2e>
			HLCD_voidSendData(A_u8CustomArray[L_u8Index]);

		}
	HLCD_voidSendCommand(0x80);
    2600:	80 e8       	ldi	r24, 0x80	; 128
    2602:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <HLCD_voidSendCommand>
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <HLCD_voidDisplayCustomChar>:

void HLCD_voidDisplayCustomChar(u8 A_u8CGRAMIndex){
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	0f 92       	push	r0
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	89 83       	std	Y+1, r24	; 0x01

	if(A_u8CGRAMIndex<8){
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	88 30       	cpi	r24, 0x08	; 8
    2624:	18 f4       	brcc	.+6      	; 0x262c <HLCD_voidDisplayCustomChar+0x18>
		HLCD_voidSendData(A_u8CGRAMIndex);
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <HLCD_voidSendData>
	}
}
    262c:	0f 90       	pop	r0
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <KPD_voidInit>:
		{'C',0 ,'=','+'}
		//COL
};


void KPD_voidInit(){
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPortDirection(KPD_PORT, 0b00001111);
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	6f e0       	ldi	r22, 0x0F	; 15
    2640:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(KPD_PORT, 0b11111111);
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	6f ef       	ldi	r22, 0xFF	; 255
    2648:	0e 94 38 0a 	call	0x1470	; 0x1470 <MDIO_voidSetPortValue>
}
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey()
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	2e 97       	sbiw	r28, 0x0e	; 14
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
	for( col=0; col <ColsNo ; col++)
    2666:	10 92 9d 00 	sts	0x009D, r1
    266a:	bb c0       	rjmp	.+374    	; 0x27e2 <KPD_u8GetPressedKey+0x190>
	{
		MDIO_voidSetPinValue(KPD_PORT, col, LOW) ;
    266c:	90 91 9d 00 	lds	r25, 0x009D
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	69 2f       	mov	r22, r25
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
		for(row=4; row<RowsNo+ColsNo; row++) //4,5,6,7
    267a:	84 e0       	ldi	r24, 0x04	; 4
    267c:	80 93 9e 00 	sts	0x009E, r24
    2680:	9f c0       	rjmp	.+318    	; 0x27c0 <KPD_u8GetPressedKey+0x16e>
		{
			if(MDIO_u8GetPinValue(KPD_PORT, row)==LOW)
    2682:	90 91 9e 00 	lds	r25, 0x009E
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	69 2f       	mov	r22, r25
    268a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MDIO_u8GetPinValue>
    268e:	88 23       	and	r24, r24
    2690:	c1 f4       	brne	.+48     	; 0x26c2 <KPD_u8GetPressedKey+0x70>
			{
				KPD_u8PressedKey= KPD_GRID[row-RowsNo][col];
    2692:	80 91 9e 00 	lds	r24, 0x009E
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	ac 01       	movw	r20, r24
    269c:	44 50       	subi	r20, 0x04	; 4
    269e:	50 40       	sbci	r21, 0x00	; 0
    26a0:	80 91 9d 00 	lds	r24, 0x009D
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	ca 01       	movw	r24, r20
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	82 0f       	add	r24, r18
    26b4:	93 1f       	adc	r25, r19
    26b6:	fc 01       	movw	r30, r24
    26b8:	eb 58       	subi	r30, 0x8B	; 139
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	80 93 9c 00 	sts	0x009C, r24
			}
			while(MDIO_u8GetPinValue(KPD_PORT, row)==LOW);
    26c2:	90 91 9e 00 	lds	r25, 0x009E
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	69 2f       	mov	r22, r25
    26ca:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MDIO_u8GetPinValue>
    26ce:	88 23       	and	r24, r24
    26d0:	c1 f3       	breq	.-16     	; 0x26c2 <KPD_u8GetPressedKey+0x70>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a0 e2       	ldi	r26, 0x20	; 32
    26d8:	b1 e4       	ldi	r27, 0x41	; 65
    26da:	8b 87       	std	Y+11, r24	; 0x0b
    26dc:	9c 87       	std	Y+12, r25	; 0x0c
    26de:	ad 87       	std	Y+13, r26	; 0x0d
    26e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	4a ef       	ldi	r20, 0xFA	; 250
    26f0:	54 e4       	ldi	r21, 0x44	; 68
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	8f 83       	std	Y+7, r24	; 0x07
    26fc:	98 87       	std	Y+8, r25	; 0x08
    26fe:	a9 87       	std	Y+9, r26	; 0x09
    2700:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	2c f4       	brge	.+10     	; 0x2724 <KPD_u8GetPressedKey+0xd2>
		__ticks = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	3f c0       	rjmp	.+126    	; 0x27a2 <KPD_u8GetPressedKey+0x150>
	else if (__tmp > 65535)
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	3f ef       	ldi	r19, 0xFF	; 255
    2730:	4f e7       	ldi	r20, 0x7F	; 127
    2732:	57 e4       	ldi	r21, 0x47	; 71
    2734:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2738:	18 16       	cp	r1, r24
    273a:	4c f5       	brge	.+82     	; 0x278e <KPD_u8GetPressedKey+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273c:	6b 85       	ldd	r22, Y+11	; 0x0b
    273e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2740:	8d 85       	ldd	r24, Y+13	; 0x0d
    2742:	9e 85       	ldd	r25, Y+14	; 0x0e
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e2       	ldi	r20, 0x20	; 32
    274a:	51 e4       	ldi	r21, 0x41	; 65
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	0f c0       	rjmp	.+30     	; 0x2784 <KPD_u8GetPressedKey+0x132>
    2766:	88 ec       	ldi	r24, 0xC8	; 200
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9c 83       	std	Y+4, r25	; 0x04
    276c:	8b 83       	std	Y+3, r24	; 0x03
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	9c 81       	ldd	r25, Y+4	; 0x04
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <KPD_u8GetPressedKey+0x120>
    2776:	9c 83       	std	Y+4, r25	; 0x04
    2778:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277a:	8d 81       	ldd	r24, Y+5	; 0x05
    277c:	9e 81       	ldd	r25, Y+6	; 0x06
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	9e 83       	std	Y+6, r25	; 0x06
    2782:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	69 f7       	brne	.-38     	; 0x2766 <KPD_u8GetPressedKey+0x114>
    278c:	14 c0       	rjmp	.+40     	; 0x27b6 <KPD_u8GetPressedKey+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278e:	6f 81       	ldd	r22, Y+7	; 0x07
    2790:	78 85       	ldd	r23, Y+8	; 0x08
    2792:	89 85       	ldd	r24, Y+9	; 0x09
    2794:	9a 85       	ldd	r25, Y+10	; 0x0a
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	9a 81       	ldd	r25, Y+2	; 0x02
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <KPD_u8GetPressedKey+0x15c>
    27b2:	9a 83       	std	Y+2, r25	; 0x02
    27b4:	89 83       	std	Y+1, r24	; 0x01
u8 KPD_u8GetPressedKey()
{
	for( col=0; col <ColsNo ; col++)
	{
		MDIO_voidSetPinValue(KPD_PORT, col, LOW) ;
		for(row=4; row<RowsNo+ColsNo; row++) //4,5,6,7
    27b6:	80 91 9e 00 	lds	r24, 0x009E
    27ba:	8f 5f       	subi	r24, 0xFF	; 255
    27bc:	80 93 9e 00 	sts	0x009E, r24
    27c0:	80 91 9e 00 	lds	r24, 0x009E
    27c4:	88 30       	cpi	r24, 0x08	; 8
    27c6:	08 f4       	brcc	.+2      	; 0x27ca <KPD_u8GetPressedKey+0x178>
    27c8:	5c cf       	rjmp	.-328    	; 0x2682 <KPD_u8GetPressedKey+0x30>
				KPD_u8PressedKey= KPD_GRID[row-RowsNo][col];
			}
			while(MDIO_u8GetPinValue(KPD_PORT, row)==LOW);
			_delay_ms(10);
		}
		MDIO_voidSetPinValue(KPD_PORT, col, HIGH) ;
    27ca:	90 91 9d 00 	lds	r25, 0x009D
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	69 2f       	mov	r22, r25
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_voidSetPinValue>
	MDIO_voidSetPortValue(KPD_PORT, 0b11111111);
}

u8 KPD_u8GetPressedKey()
{
	for( col=0; col <ColsNo ; col++)
    27d8:	80 91 9d 00 	lds	r24, 0x009D
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	80 93 9d 00 	sts	0x009D, r24
    27e2:	80 91 9d 00 	lds	r24, 0x009D
    27e6:	84 30       	cpi	r24, 0x04	; 4
    27e8:	08 f4       	brcc	.+2      	; 0x27ec <KPD_u8GetPressedKey+0x19a>
    27ea:	40 cf       	rjmp	.-384    	; 0x266c <KPD_u8GetPressedKey+0x1a>
		}
		MDIO_voidSetPinValue(KPD_PORT, col, HIGH) ;
	}


	return KPD_u8PressedKey;
    27ec:	80 91 9c 00 	lds	r24, 0x009C
}
    27f0:	2e 96       	adiw	r28, 0x0e	; 14
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <main>:
#include "../MCAL/DIO/DIO_Init.h"
#include "../HAL/LCD/LCD_Init.h"
#include "util/delay.h"

int main(void)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	6a 97       	sbiw	r28, 0x1a	; 26
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPortDirection(PORTA,0xff);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	6f ef       	ldi	r22, 0xFF	; 255
    281a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortDirection(PORTB,0xff);
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	6f ef       	ldi	r22, 0xFF	; 255
    2822:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <MDIO_voidSetPortDirection>
	HLCD_voidInit();
    2826:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <HLCD_voidInit>

	u8 heart[]={
			0x1F, 0x09, 0x09, 0x0F, 0x00, 0x00, 0x00, 0x00	};
    282a:	ce 01       	movw	r24, r28
    282c:	01 96       	adiw	r24, 0x01	; 1
    282e:	9a 8b       	std	Y+18, r25	; 0x12
    2830:	89 8b       	std	Y+17, r24	; 0x11
    2832:	ed e8       	ldi	r30, 0x8D	; 141
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	fc 8b       	std	Y+20, r31	; 0x14
    2838:	eb 8b       	std	Y+19, r30	; 0x13
    283a:	f8 e0       	ldi	r31, 0x08	; 8
    283c:	fd 8b       	std	Y+21, r31	; 0x15
    283e:	eb 89       	ldd	r30, Y+19	; 0x13
    2840:	fc 89       	ldd	r31, Y+20	; 0x14
    2842:	00 80       	ld	r0, Z
    2844:	8b 89       	ldd	r24, Y+19	; 0x13
    2846:	9c 89       	ldd	r25, Y+20	; 0x14
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
    284e:	e9 89       	ldd	r30, Y+17	; 0x11
    2850:	fa 89       	ldd	r31, Y+18	; 0x12
    2852:	00 82       	st	Z, r0
    2854:	89 89       	ldd	r24, Y+17	; 0x11
    2856:	9a 89       	ldd	r25, Y+18	; 0x12
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	9a 8b       	std	Y+18, r25	; 0x12
    285c:	89 8b       	std	Y+17, r24	; 0x11
    285e:	9d 89       	ldd	r25, Y+21	; 0x15
    2860:	91 50       	subi	r25, 0x01	; 1
    2862:	9d 8b       	std	Y+21, r25	; 0x15
    2864:	ed 89       	ldd	r30, Y+21	; 0x15
    2866:	ee 23       	and	r30, r30
    2868:	51 f7       	brne	.-44     	; 0x283e <main+0x3c>

	u8 myShape[] = {
			0x04,0x0A,0x15,0x15,0x0A,0x04,0x00,0x00
	};
    286a:	ce 01       	movw	r24, r28
    286c:	09 96       	adiw	r24, 0x09	; 9
    286e:	9f 8b       	std	Y+23, r25	; 0x17
    2870:	8e 8b       	std	Y+22, r24	; 0x16
    2872:	e5 e8       	ldi	r30, 0x85	; 133
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	f9 8f       	std	Y+25, r31	; 0x19
    2878:	e8 8f       	std	Y+24, r30	; 0x18
    287a:	f8 e0       	ldi	r31, 0x08	; 8
    287c:	fa 8f       	std	Y+26, r31	; 0x1a
    287e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2880:	f9 8d       	ldd	r31, Y+25	; 0x19
    2882:	00 80       	ld	r0, Z
    2884:	88 8d       	ldd	r24, Y+24	; 0x18
    2886:	99 8d       	ldd	r25, Y+25	; 0x19
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	99 8f       	std	Y+25, r25	; 0x19
    288c:	88 8f       	std	Y+24, r24	; 0x18
    288e:	ee 89       	ldd	r30, Y+22	; 0x16
    2890:	ff 89       	ldd	r31, Y+23	; 0x17
    2892:	00 82       	st	Z, r0
    2894:	8e 89       	ldd	r24, Y+22	; 0x16
    2896:	9f 89       	ldd	r25, Y+23	; 0x17
    2898:	01 96       	adiw	r24, 0x01	; 1
    289a:	9f 8b       	std	Y+23, r25	; 0x17
    289c:	8e 8b       	std	Y+22, r24	; 0x16
    289e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28a0:	91 50       	subi	r25, 0x01	; 1
    28a2:	9a 8f       	std	Y+26, r25	; 0x1a
    28a4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    28a6:	ee 23       	and	r30, r30
    28a8:	51 f7       	brne	.-44     	; 0x287e <main+0x7c>
HLCD_voidSendData('A');
    28aa:	81 e4       	ldi	r24, 0x41	; 65
    28ac:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <HLCD_voidSendData>
	HLCD_voidSaveCustomChar(1,heart);
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	9e 01       	movw	r18, r28
    28b4:	2f 5f       	subi	r18, 0xFF	; 255
    28b6:	3f 4f       	sbci	r19, 0xFF	; 255
    28b8:	b9 01       	movw	r22, r18
    28ba:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <HLCD_voidSaveCustomChar>
	HLCD_voidCursor(3,1);
    28be:	83 e0       	ldi	r24, 0x03	; 3
    28c0:	61 e0       	ldi	r22, 0x01	; 1
    28c2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <HLCD_voidCursor>
	HLCD_voidDisplayCustomChar(1);
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	0e 94 0a 13 	call	0x2614	; 0x2614 <HLCD_voidDisplayCustomChar>
    28cc:	ff cf       	rjmp	.-2      	; 0x28cc <main+0xca>

000028ce <__mulsi3>:
    28ce:	62 9f       	mul	r22, r18
    28d0:	d0 01       	movw	r26, r0
    28d2:	73 9f       	mul	r23, r19
    28d4:	f0 01       	movw	r30, r0
    28d6:	82 9f       	mul	r24, r18
    28d8:	e0 0d       	add	r30, r0
    28da:	f1 1d       	adc	r31, r1
    28dc:	64 9f       	mul	r22, r20
    28de:	e0 0d       	add	r30, r0
    28e0:	f1 1d       	adc	r31, r1
    28e2:	92 9f       	mul	r25, r18
    28e4:	f0 0d       	add	r31, r0
    28e6:	83 9f       	mul	r24, r19
    28e8:	f0 0d       	add	r31, r0
    28ea:	74 9f       	mul	r23, r20
    28ec:	f0 0d       	add	r31, r0
    28ee:	65 9f       	mul	r22, r21
    28f0:	f0 0d       	add	r31, r0
    28f2:	99 27       	eor	r25, r25
    28f4:	72 9f       	mul	r23, r18
    28f6:	b0 0d       	add	r27, r0
    28f8:	e1 1d       	adc	r30, r1
    28fa:	f9 1f       	adc	r31, r25
    28fc:	63 9f       	mul	r22, r19
    28fe:	b0 0d       	add	r27, r0
    2900:	e1 1d       	adc	r30, r1
    2902:	f9 1f       	adc	r31, r25
    2904:	bd 01       	movw	r22, r26
    2906:	cf 01       	movw	r24, r30
    2908:	11 24       	eor	r1, r1
    290a:	08 95       	ret

0000290c <__udivmodqi4>:
    290c:	99 1b       	sub	r25, r25
    290e:	79 e0       	ldi	r23, 0x09	; 9
    2910:	04 c0       	rjmp	.+8      	; 0x291a <__udivmodqi4_ep>

00002912 <__udivmodqi4_loop>:
    2912:	99 1f       	adc	r25, r25
    2914:	96 17       	cp	r25, r22
    2916:	08 f0       	brcs	.+2      	; 0x291a <__udivmodqi4_ep>
    2918:	96 1b       	sub	r25, r22

0000291a <__udivmodqi4_ep>:
    291a:	88 1f       	adc	r24, r24
    291c:	7a 95       	dec	r23
    291e:	c9 f7       	brne	.-14     	; 0x2912 <__udivmodqi4_loop>
    2920:	80 95       	com	r24
    2922:	08 95       	ret

00002924 <__udivmodsi4>:
    2924:	a1 e2       	ldi	r26, 0x21	; 33
    2926:	1a 2e       	mov	r1, r26
    2928:	aa 1b       	sub	r26, r26
    292a:	bb 1b       	sub	r27, r27
    292c:	fd 01       	movw	r30, r26
    292e:	0d c0       	rjmp	.+26     	; 0x294a <__udivmodsi4_ep>

00002930 <__udivmodsi4_loop>:
    2930:	aa 1f       	adc	r26, r26
    2932:	bb 1f       	adc	r27, r27
    2934:	ee 1f       	adc	r30, r30
    2936:	ff 1f       	adc	r31, r31
    2938:	a2 17       	cp	r26, r18
    293a:	b3 07       	cpc	r27, r19
    293c:	e4 07       	cpc	r30, r20
    293e:	f5 07       	cpc	r31, r21
    2940:	20 f0       	brcs	.+8      	; 0x294a <__udivmodsi4_ep>
    2942:	a2 1b       	sub	r26, r18
    2944:	b3 0b       	sbc	r27, r19
    2946:	e4 0b       	sbc	r30, r20
    2948:	f5 0b       	sbc	r31, r21

0000294a <__udivmodsi4_ep>:
    294a:	66 1f       	adc	r22, r22
    294c:	77 1f       	adc	r23, r23
    294e:	88 1f       	adc	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	1a 94       	dec	r1
    2954:	69 f7       	brne	.-38     	; 0x2930 <__udivmodsi4_loop>
    2956:	60 95       	com	r22
    2958:	70 95       	com	r23
    295a:	80 95       	com	r24
    295c:	90 95       	com	r25
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	bd 01       	movw	r22, r26
    2964:	cf 01       	movw	r24, r30
    2966:	08 95       	ret

00002968 <__divmodsi4>:
    2968:	97 fb       	bst	r25, 7
    296a:	09 2e       	mov	r0, r25
    296c:	05 26       	eor	r0, r21
    296e:	0e d0       	rcall	.+28     	; 0x298c <__divmodsi4_neg1>
    2970:	57 fd       	sbrc	r21, 7
    2972:	04 d0       	rcall	.+8      	; 0x297c <__divmodsi4_neg2>
    2974:	d7 df       	rcall	.-82     	; 0x2924 <__udivmodsi4>
    2976:	0a d0       	rcall	.+20     	; 0x298c <__divmodsi4_neg1>
    2978:	00 1c       	adc	r0, r0
    297a:	38 f4       	brcc	.+14     	; 0x298a <__divmodsi4_exit>

0000297c <__divmodsi4_neg2>:
    297c:	50 95       	com	r21
    297e:	40 95       	com	r20
    2980:	30 95       	com	r19
    2982:	21 95       	neg	r18
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	4f 4f       	sbci	r20, 0xFF	; 255
    2988:	5f 4f       	sbci	r21, 0xFF	; 255

0000298a <__divmodsi4_exit>:
    298a:	08 95       	ret

0000298c <__divmodsi4_neg1>:
    298c:	f6 f7       	brtc	.-4      	; 0x298a <__divmodsi4_exit>
    298e:	90 95       	com	r25
    2990:	80 95       	com	r24
    2992:	70 95       	com	r23
    2994:	61 95       	neg	r22
    2996:	7f 4f       	sbci	r23, 0xFF	; 255
    2998:	8f 4f       	sbci	r24, 0xFF	; 255
    299a:	9f 4f       	sbci	r25, 0xFF	; 255
    299c:	08 95       	ret

0000299e <__prologue_saves__>:
    299e:	2f 92       	push	r2
    29a0:	3f 92       	push	r3
    29a2:	4f 92       	push	r4
    29a4:	5f 92       	push	r5
    29a6:	6f 92       	push	r6
    29a8:	7f 92       	push	r7
    29aa:	8f 92       	push	r8
    29ac:	9f 92       	push	r9
    29ae:	af 92       	push	r10
    29b0:	bf 92       	push	r11
    29b2:	cf 92       	push	r12
    29b4:	df 92       	push	r13
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	ca 1b       	sub	r28, r26
    29c8:	db 0b       	sbc	r29, r27
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	09 94       	ijmp

000029d6 <__epilogue_restores__>:
    29d6:	2a 88       	ldd	r2, Y+18	; 0x12
    29d8:	39 88       	ldd	r3, Y+17	; 0x11
    29da:	48 88       	ldd	r4, Y+16	; 0x10
    29dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    29de:	6e 84       	ldd	r6, Y+14	; 0x0e
    29e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    29e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    29e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    29e8:	b9 84       	ldd	r11, Y+9	; 0x09
    29ea:	c8 84       	ldd	r12, Y+8	; 0x08
    29ec:	df 80       	ldd	r13, Y+7	; 0x07
    29ee:	ee 80       	ldd	r14, Y+6	; 0x06
    29f0:	fd 80       	ldd	r15, Y+5	; 0x05
    29f2:	0c 81       	ldd	r16, Y+4	; 0x04
    29f4:	1b 81       	ldd	r17, Y+3	; 0x03
    29f6:	aa 81       	ldd	r26, Y+2	; 0x02
    29f8:	b9 81       	ldd	r27, Y+1	; 0x01
    29fa:	ce 0f       	add	r28, r30
    29fc:	d1 1d       	adc	r29, r1
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	ed 01       	movw	r28, r26
    2a0a:	08 95       	ret

00002a0c <_exit>:
    2a0c:	f8 94       	cli

00002a0e <__stop_program>:
    2a0e:	ff cf       	rjmp	.-2      	; 0x2a0e <__stop_program>
